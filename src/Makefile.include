## Options;
if ENABLE_F90
F90_S = lawson_hanson2.f90
endif

if ENABLE_TRACKING
TRACKING_S = TrackerHTTP.C
TRACKING_H = TrackerHTTP.H
TRACKING_INCL = @LIBCURL_CPPFLAGS@
TRACKING_LIBS = @LIBCURL@
endif

## Packages;

NIDR_INCL	= -I$(top_srcdir)/packages/nidr
NIDR_BUILD	= $(top_builddir)/packages/nidr
NIDR_ARCHIVE	= $(NIDR_BUILD)/libnidr.a

BOOST_INCL      = @BOOST_CPPFLAGS@ ##-I$(top_srcdir)/packages

TEUCHOS_INCL	= @TEUCHOS_CPPFLAGS@
TEUCHOS_ARCHIVE	= @TEUCHOS_LDFLAGS@ -lteuchos

##if WITH_PECOS
PECOS_ROOT    = $(top_srcdir)/packages/pecos
PECOS_BUILD   = $(top_builddir)/packages/pecos
PECOS_INCL    = -I$(PECOS_BUILD) -I$(PECOS_ROOT)/src
PECOS_ARCHIVE = $(PECOS_BUILD)/libpecos.la
##if WITH_SPARSE_GRID
SPARSE_GRID_ROOT    = $(PECOS_ROOT)/packages/VPISparseGrid
SPARSE_GRID_SRC     = $(SPARSE_GRID_ROOT)/src
SPARSE_GRID_INCL    = -I$(SPARSE_GRID_SRC)
##SPARSE_GRID_BUILD   = $(SPARSE_GRID_SRC)
##SPARSE_GRID_ARCHIVE = $(SPARSE_GRID_BUILD)/libsparsegrid.la
##endif
##endif

if WITH_AMPL
AMPL_INCL	= -I$(top_builddir)/packages
endif

if WITH_GRAPHICS
MOTIF_SRC         = $(top_srcdir)/packages/motif/src
MOTIF_INCL        = -I$(top_builddir)/packages/motif/include \
		    -I$(top_srcdir)/packages/motif/include \
		    -I$(top_srcdir)/packages/motif/src/Widgets
MOTIF_BUILD       = $(top_builddir)/packages/motif/src
MOTIF_ARCHIVE     = $(MOTIF_BUILD)/libDGraphics.la
GRAPHICS_INCL     = $(MOTIF_INCL)
GRAPHICS_ARCHIVE  = $(MOTIF_ARCHIVE)
endif

if WITH_SURFPACK
SP_BUILDDIR  = $(top_builddir)/packages/surfpack
SP_SRCDIR    = $(top_srcdir)/packages/surfpack
SP_SRC       = $(SP_SRCDIR)/src
SP_INCL      = -I$(SP_BUILDDIR) -I$(SP_SRCDIR) -I$(SP_SRCDIR)/src \
	       -I$(SP_SRCDIR)/src/interpreter -I$(SP_SRCDIR)/src/surfaces
SP_ARCHIVE   = $(SP_BUILDDIR)/src/libsurfpack.la
SURFPACK_H   = SurfpackApproximation.H
SURFPACK_S   = SurfpackApproximation.C
endif

## Methods;
if WITH_ACRO
ACRO_SRC	= $(top_srcdir)/packages/acro
ACRO_BUILD	= $(top_builddir)/packages/acro
ACRO_INCL	= -I$(ACRO_BUILD)/include                \
		  -I$(ACRO_SRC)/packages/colin/src      \
		  -I$(ACRO_SRC)/packages/scolib/src     \
		  -I$(ACRO_SRC)/packages/interfaces/src 
ACRO_ARCHIVE	= $(ACRO_BUILD)/packages/colin/src/libcolin.a           \
                  $(ACRO_BUILD)/packages/interfaces/src/libinterfaces.a \
                  $(ACRO_BUILD)/tpl/momhlib/libmomh.a                   \
                  $(ACRO_BUILD)/packages/scolib/src/libscolib.a         \
                  $(ACRO_BUILD)/packages/pebbl/src/libpebbl.a           \
                  $(ACRO_BUILD)/tpl/tinyxml/libtinyxml.a                \
                  $(ACRO_BUILD)/packages/utilib/src/libutilib.la        \
                  $(ACRO_BUILD)/tpl/3po/lib3po.a                        
COLINY_OPT_H	= COLINApplication.H COLINOptimizer.H
COLINY_OPT_S	= COLINApplication.C COLINOptimizer.C
endif

if WITH_AMPL
AMPL_ARCHIVE	= $(top_builddir)/packages/ampl/funcadd0.o \
		  $(top_builddir)/packages/ampl/amplsolver.a
endif

if WITH_HOPSPACK
HOPSPACK_SRC     = $(top_srcdir)/packages/hopspack
HOPSPACK_BUILD   = $(top_builddir)/packages/hopspack/dakota_build
HOPSPACK_INCL    = -I$(HOPSPACK_SRC)/src/src-citizens  \
		   -I$(HOPSPACK_SRC)/src/src-evaluator \
		   -I$(HOPSPACK_SRC)/src/src-executor  \
		   -I$(HOPSPACK_SRC)/src/src-framework \
		   -I$(HOPSPACK_SRC)/src/src-main      \
		   -I$(HOPSPACK_SRC)/src/src-shared    \
		   -I$(HOPSPACK_SRC)/dakota_build/include \
		   -I$(HOPSPACK_BUILD)/include
HOPSPACK_ARCHIVE = $(HOPSPACK_BUILD)/libhopspack.la
HOPSPACK_OPT_H   = APPSEvalMgr.H APPSOptimizer.H
HOPSPACK_OPT_S   = APPSEvalMgr.C APPSOptimizer.C
endif

if WITH_CONMIN
CONMIN_SRC       = $(top_srcdir)/packages/CONMIN/src
CONMIN_BUILD     = $(top_builddir)/packages/CONMIN/src
CONMIN_ARCHIVE   = $(CONMIN_BUILD)/libconmin.la
CONMIN_OPT_H     = CONMINOptimizer.H
CONMIN_OPT_S	 = CONMINOptimizer.C
endif

if WITH_DDACE
DDACE_SRC       = $(top_srcdir)/packages/DDACE
DDACE_BUILD     = $(top_builddir)/packages/DDACE
DDACE_ARCHIVE   = $(DDACE_BUILD)/src/libddace.la
DDACE_INCL      = -I$(DDACE_BUILD) -I$(DDACE_SRC)/include
DDACE_H         = DDACEDesignCompExp.H
DDACE_S		= DDACEDesignCompExp.C
endif

if WITH_DL_SOLVER
DL_SOLVER_H	= DLSolver.H
DL_SOLVER_S	= DLSolver.C
endif

if WITH_DOT
DOT_SRC       = $(top_srcdir)/packages/DOT/dbl_prec
DOT_BUILD     = $(top_builddir)/packages/DOT/dbl_prec
DOT_ARCHIVE   = $(DOT_BUILD)/libdot.la
DOT_OPT_H     = DOTOptimizer.H
DOT_OPT_S     = DOTOptimizer.C
endif

if WITH_FSUDACE
FSUD_SRC       = $(top_srcdir)/packages/FSUDace
FSUD_INCL      = -I$(top_builddir)/packages/FSUDace -I$(FSUD_SRC)
FSUD_BUILD     = $(top_builddir)/packages/FSUDace
FSUD_ARCHIVE   = $(FSUD_BUILD)/libfsudace.la
FSU_DACE_H     = FSUDesignCompExp.H
FSU_DACE_S     = FSUDesignCompExp.C
endif

if WITH_GPMSA
GPMSA_SRC     = $(top_srcdir)/packages/gpmsa
GPMSA_BUILD   = $(top_builddir)/packages/gpmsa
GPMSA_INCL    = -I$(GPMSA_SRC)
GPMSA_ARCHIVE = $(GPMSA_BUILD)/libgpmsa.la
GPMSA_H       = NonDGPMSABayesCalibration.H
GPMSA_S       = NonDGPMSABayesCalibration.C
endif

if WITH_GSL  	 	 
GSL_INCL      = @GSL_CPPFLAGS@  	 	 
GSL_ARCHIVE   = @GSL_LDFLAGS@ -lgsl  	 	 
endif 

if WITH_QUESO
QUESO_BUILD   = $(top_builddir)/packages/queso
QUESO_INCL    = -I$(QUESO_BUILD)
QUESO_ARCHIVE = $(QUESO_BUILD)/libqueso.la
QUESO_H       = NonDQUESOBayesCalibration.H
QUESO_S       = NonDQUESOBayesCalibration.C
endif

if WITH_JEGA
JEGA_ROOT      = $(top_srcdir)/packages/JEGA
JEGA_SRC       = $(JEGA_ROOT)/src
JEGA_MOGA_SRC  = $(JEGA_ROOT)/MOGA/src
JEGA_SOGA_SRC  = $(JEGA_ROOT)/SOGA/src
JEGA_UTIL_SRC  = $(JEGA_ROOT)/Utilities/src
JEGA_INCL      = -I$(top_builddir)/packages/JEGA \
		 -I$(top_builddir)/packages/JEGA/eddy \
		 -I$(JEGA_ROOT) -I$(JEGA_ROOT)/include \
                 -I$(JEGA_ROOT)/eddy
JEGA_BUILD     = $(top_builddir)/packages/JEGA/src
JEGA_ARCHIVE   = $(JEGA_BUILD)/libjega.la
JEGA_OPT_H     = JEGAOptimizer.H
JEGA_OPT_S     = JEGAOptimizer.C
endif

if WITH_NCSU
NCSU_SRC     = $(top_srcdir)/packages/NCSUOpt
NCSU_BUILD   = $(top_builddir)/packages/NCSUOpt
NCSU_ARCHIVE = $(NCSU_BUILD)/libncsuopt.a
NCSU_OPT_H   = NCSUOptimizer.H
NCSU_OPT_S   = NCSUOptimizer.C
endif

if WITH_NL2SOL
NL2SOL_SRC      = $(top_srcdir)/packages/NL2SOL
NL2SOL_BUILD    = $(top_builddir)/packages/NL2SOL
NL2SOL_ARCHIVE  = $(NL2SOL_BUILD)/libcport.la
NL2SOL_OPT_H    = NL2SOLLeastSq.H
NL2SOL_OPT_S    = NL2SOLLeastSq.C
endif

if WITH_NLPQL
NLPQL_SRC       = $(top_srcdir)/packages/NLPQL
NLPQL_BUILD     = $(top_builddir)/packages/NLPQL
NLPQL_ARCHIVE   = $(NLPQL_BUILD)/libnlpql.la
NLPQL_OPT_H     = NLPQLPOptimizer.H
NLPQL_OPT_S     = NLPQLPOptimizer.C
endif

if WITH_NPSOL
NPSOL_SRC       = $(top_srcdir)/packages/NPSOL
NPSOL_BUILD     = $(top_builddir)/packages/NPSOL
NPSOL_ARCHIVE   = $(NPSOL_BUILD)/libnpsol.la
NPSOL_OPT_H     = SOLBase.H \
		  NPSOLOptimizer.H \
		  NLSSOLLeastSq.H
NPSOL_OPT_S     = SOLBase.C \
		  NPSOLOptimizer.C \
		  NLSSOLLeastSq.C \
		  npoptn_wrapper.f
endif

if WITH_OPTPP
OPTPP_SRC       = $(top_srcdir)/packages/OPTPP
OPTPP_BUILD     = $(top_builddir)/packages/OPTPP
OPTPP_INCL      = -I$(OPTPP_BUILD)/include -I$(OPTPP_SRC)/include \
		  -I$(OPTPP_SRC)/newmat11
OPTPP_ARCHIVE   = $(OPTPP_BUILD)/lib/libopt.la
NEWMAT_ARCHIVE  = $(OPTPP_BUILD)/lib/libnewmat.la
OPTPP_OPT_H     = SNLLBase.H \
                  SNLLOptimizer.H \
                  SNLLLeastSq.H
OPTPP_OPT_S     = SNLLBase.C \
                  SNLLOptimizer.C \
                  SNLLLeastSq.C
endif

if WITH_PSUADE
PSUADE_SRC      = $(top_srcdir)/packages/PSUADE
PSUADE_BUILD    = $(top_builddir)/packages/PSUADE
PSUADE_INCL     = -I${PSUADE_BUILD} -I${PSUADE_SRC}
PSUADE_ARCHIVE  = $(PSUADE_BUILD)/libpsuade.la
PSUADE_H	= PSUADEDesignCompExp.H
PSUADE_S	= PSUADEDesignCompExp.C
endif

## Interfaces;
if USE_XDR
  XDR_H         = dak_xdr_interface.h
  XDR_S         = dak_xdr_interface.c
endif

if WITH_PLUGIN
PLUGIN_H        = PluginSerialDirectApplicInterface.H   \
		  PluginParallelDirectApplicInterface.H
PLUGIN_S        = PluginSerialDirectApplicInterface.C   \
                  PluginParallelDirectApplicInterface.C
endif

## These are include in distribution, but not referenced as sources,
## since no other files depend on them
if WITH_DLL
DLL_H		= dll_api.h
DLL_S		= dll_api.C
endif

if WITH_MODELCENTER
  MC_SRC        = $(top_srcdir)/examples/linked_interfaces/ModelCenter
  MC_INCL       = -I$(MC_SRC)/include
  MC_ARCHIVE    = $(MC_SRC)/lib/i686-cygwin-cygwinNT/libPHXCppApi.a
##MC_BUILD      = $(top_builddir)/applications/ModelCenter
endif

## Define the includes which we will use for compilation and linking.
INCLUDES = $(NIDR_INCL) \
	   $(TEUCHOS_INCL) \
	   $(PECOS_INCL) \
	   $(AMPL_INCL) \
	   $(MC_INCL) \
	   $(GRAPHICS_INCL) \
           $(X_CFLAGS) \
	   $(BOOST_INCL) \
	   $(SPARSE_GRID_INCL) \
	   $(SP_INCL) \
	   $(ACRO_INCL) \
	   $(CONMIN_INCL) \
	   $(DDACE_INCL) \
	   $(DOT_INCL) \
	   $(FSUD_INCL) \
	   $(GPMSA_INCL) \
	   $(GSL_INCL) \
	   $(QUESO_INCL) \
	   $(HOPSPACK_INCL) \
	   $(JEGA_INCL) \
	   $(NL2SOL_INCL) \
	   $(NLPQL_INCL) \
	   $(NPSOL_INCL) \
	   $(OPTPP_INCL) \
	   $(PSUADE_INCL) \
	   $(NEWMAT_INCL) \
	   $(MATLAB_INCL) \
	   $(TRACKING_INCL)

## Define the libraries we'll link the dakota* binary executables against.
ARCHIVES = $(NIDR_ARCHIVE) \
	   $(TEUCHOS_ARCHIVE) \
	   $(PECOS_ARCHIVE) \
	   $(MC_ARCHIVE) \
	   $(GRAPHICS_ARCHIVE) \
	   $(SP_ARCHIVE) \
	   $(CONMIN_ARCHIVE) \
	   $(DDACE_ARCHIVE) \
	   $(DOT_ARCHIVE) \
	   $(FSUD_ARCHIVE) \
	   $(GPMSA_ARCHIVE) \
	   $(GSL_ARCHIVE) \
	   $(QUESO_ARCHIVE) \
	   $(JEGA_ARCHIVE) \
	   $(NL2SOL_ARCHIVE) \
	   $(NLPQL_ARCHIVE) \
	   $(NPSOL_ARCHIVE) \
	   $(OPTPP_ARCHIVE) \
	   $(PSUADE_ARCHIVE) \
	   $(NEWMAT_ARCHIVE) \
	   $(NCSU_ARCHIVE) \
	   $(SPARSE_GRID_ARCHIVE) \
	   $(ACRO_ARCHIVE) \
	   $(HOPSPACK_ARCHIVE) \
	   $(AMPL_ARCHIVE) \
	   $(TRACKING_LIBS)
