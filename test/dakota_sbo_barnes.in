# DAKOTA INPUT FILE - dakota_sbo_barnes.in

# Demonstrates the use of approximation models and a trust region
# optimization strategy in performing constrained minimization on
# the textbook test function.
#
# Each DAKOTA test file is capable of running multiple tests. The
# manual process for doing this is to add or uncomment specific lines
# needed for a test and comment out other lines which are not needed
# for that specific test.  Within the automatic test script, a special
# syntax is used to automatically determine which lines are to be used
# for a specific test. A #n (0 - 9) is used to associate lines in the
# test file with a specific test.  The #0 is used to designate lines
# which are to be run as part of the baseline test but not part of the
# other tests. To add multiple tests to a file add the #n to the
# trailing comment of a line, the dakota_test script will parse
# through the file uncommenting the lines marked for a specific test,
# and commenting out unneeded lines marked with the #0. Specific lines
# can be included in multiple tests by adding multiple #n designaters
# seperated by a comma.

# These tests exercise global, local, and multipoint surrogates for
# feasible and infeasible starting points with and without constraint
# relaxation.

strategy,
	single_method
#	graphics
	method_pointer = 'SBLO'

method,
	id_method = 'SBLO'
	surrogate_based_local
	model_pointer = 'SURROGATE'
	approx_method_pointer = 'NLP'
	max_iterations = 50
	trust_region
	  initial_size = 0.10
	  contraction_factor = 0.5
#	  constraint_relax homotopy		#6,#8,#9,#11
	  expansion_factor   = 1.50

method,
	id_method = 'NLP'
	npsol
	  max_iterations = 50
	  convergence_tolerance = 1e-4

model,
	id_model = 'SURROGATE'
	responses_pointer = 'SURROGATE_RESP'
	surrogate global                  	#0,#2,#3,#5,#6,#8,#9,#11
	  dace_method_pointer = 'SAMPLING'	#0,#2,#3,#5,#6,#8,#9,#11
	  polynomial quadratic			#0,#2,#3,#5,#6,#8,#9,#11
#	  correction additive first_order	#0,#3,#6,#9
# 	surrogate local taylor_series		#1,#4,#7,#10
#	  actual_model_pointer = 'TRUTH'	#1,#4,#7,#10
# 	surrogate multipoint tana		#12,#13
#	  actual_model_pointer = 'TRUTH'	#12,#13

variables,
	continuous_design = 2
#   Feasible starting point
	  initial_point    30.   40.	#0,#1,#2,#3,#4,#5,#12
# Infeasible starting point
#	  initial_point    65.    1.
# Infeasible starting point
#	  initial_point    10.   20.	#6,#7,#8,#9,#10,#11,#13
	  lower_bounds      0.    0.
	  upper_bounds     80.   80.
	  descriptors      'x1'  'x2'

responses,
	id_responses = 'SURROGATE_RESP'
	num_objective_functions = 1
	num_nonlinear_inequality_constraints = 3
	nonlinear_inequality_lower_bounds = 0.     0.     0.
	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50 1.e+50
	analytic_gradients
	no_hessians

###############################################
# SAMPLING method specifications for building #
# surrogate function(s)			      #
###############################################
method,
	id_method = 'SAMPLING'
	model_pointer = 'TRUTH'
	nond_sampling all_variables
	  seed = 12345 rng rnum2 samples = 10

model,
	id_model = 'TRUTH'
	single
	  interface_pointer = 'TRUE_FN'
	  responses_pointer = 'TRUE_RESP'

interface,
	system #asynchronous
	id_interface = 'TRUE_FN'
 	  analysis_driver = 'barnes'

responses,
	id_responses = 'TRUE_RESP'
	num_objective_functions = 1
	num_nonlinear_inequality_constraints = 3
	nonlinear_inequality_lower_bounds = 0.     0.     0.
	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50 1.e+50
	no_gradients		 	#0,#2,#6,#8
#	numerical_gradients		#7
#	  method_source dakota		#7
#	analytic_gradients		#1,#3,#4,#5,#9,#10,#11,#12,#13
	no_hessians
