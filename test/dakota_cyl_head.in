# DAKOTA INPUT FILE : dakota_cyl_head.in

# Each DAKOTA test file is capable of running multiple tests. The
# manual process for doing this is to add or uncomment specific lines
# needed for a test and comment out other lines which are not needed
# for that specific test.  Within the automatic test script, a special
# syntax is used to automatically determine which lines are to be used
# for a specific test. A #n (0 - 9) is used to associate lines in the
# test file with a specific test.  The #s0 is used to designate lines
# which are to be run as part of the baseline test but not part of the
# other tests. To add multiple tests to a file add the #n to the
# trailing comment of a line, the dakota_test script will parse
# through the file uncommenting the lines marked for a specific test,
# and commenting out unneeded lines marked with the #s0. Specific lines
# can be included in multiple tests by adding multiple #n designaters
# seperated by a comma.

# This file covers a testing matrix in which NPSOL, DOT, CONMIN, and OPT++
# each solve the cyl_head problem with 5 different formulations:
# (1) minimization w/ 3 nonlinear 1-sided ineq
# (2) minimization w/ 3 nonlinear 1-sided ineq plus 1 linear 1-sided ineq
# (3) minimization w/ 3 nonlinear 1-sided ineq plus 1 linear eq
# (4) minimization w/ 2 nonlinear 2-sided ineq plus 1 nonlinear eq
# (5) maximization w/ 3 nonlinear 1-sided ineq (non-default bounds)

environment,
#	  graphics
	  tabular_graphics_data

method,
	npsol_sqp					#s0,#s1,#s2,#s3,#s4
#	dot_sqp						#s5,#s6,#s7,#s8,#s9
#	conmin_mfd     					#s10,#s11,#s12,#s13,#s14
#	optpp_q_newton					#s15,#s16,#s17,#s18,#s19
#	nlpql_sqp					#s20,#s21,#s22,#s23,#s24
#	reduced_sqp
	  convergence_tolerance = 1.e-8
#	  linear_inequality_constraint_matrix = 1. 1.	#s1,#s6,#s11,#s16,#s21
#	  linear_inequality_upper_bounds = 3.7		#s1,#s6,#s11,#s16,#s21
#	  linear_equality_constraint_matrix = 1. 1.	#s2,#s7,#s12,#s17,#s22
#	  linear_equality_targets = 3.7			#s2,#s7,#s12,#s17,#s22

variables,
	continuous_design = 2
	  initial_point    1.8          1.0
	  upper_bounds     2.164        4.0
	  lower_bounds     1.5          0.0
	  descriptors      'intake_dia' 'flatness'

interface,
	fork asynchronous
	  analysis_driver=  'cyl_head'

responses,
	objective_functions = 1
#	sense = "maximize"				    #s4,#s9,#s14,#s19,#s24
	nonlinear_inequality_constraints = 3		    #s0,#s1,#s2,#s4,#s5,#s6,#s7,#s9,#s10,#s11,#s12,#s14,#s15,#s16,#s17,#s19,#s20,#s21,#s22,#s24
#	nonlinear_inequality_lower_bounds = -.25 -.25 -.25  #s4,#s9,#s14,#s19,#s24
#	nonlinear_inequality_upper_bounds = 1e50 1e50 1e50  #s4,#s9,#s14,#s19,#s24
#	nonlinear_inequality_constraints = 2		    #s3,#s8,#s13,#s18,#s23
#	nonlinear_inequality_lower_bounds = -.2 -.2	    #s3,#s8,#s13,#s18,#s23
#	nonlinear_inequality_upper_bounds =  .2  .2	    #s3,#s8,#s13,#s18,#s23
#	nonlinear_equality_constraints = 1   	 	    #s3,#s8,#s13,#s18,#s23
#	nonlinear_equality_targets = -.2 		    #s3,#s8,#s13,#s18,#s23
	analytic_gradients
#	numerical_gradients
#	  method_source dakota
#	  interval_type central
#	  fd_gradient_step_size = 1.e-4
	no_hessians
