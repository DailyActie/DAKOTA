# Tests: all use workdir named trydir
# 0	no extra options (script in inputdir, tmpnamed files)
# 1	tag the workdir
# 2	tag and save the workdir
# 3	template_files linked from trydir (check data file existence)
# 4	template_directory contents linked from trydir
# 5	template_files copied from trydir
# 6	template_directory contents copied from trydir
# 7	analysis driver located in template_directory
# 8	basic work_directory, but with named parameters file, stripping dirname
# 9	tagged and saved work_directory, with named and saved parameters file

# TODO: Add tests for:
# * driver lives on PATH, but not in inputdir
# * driver is a template file (not sure how to test since . should be a valid 
#   location)
# * named vs. anonymous work_directory
# * put a junk file and use replace to replace
# * put a good file and verify junk doesn't replace
# * asynch vs. synch
# * Test with trydir/subdir for workdir (currently requires mkdir trydir first)
# * Get autotagging working and test
# * Parallel testing: blocked for test > 1 as doesn't seem to find driver in pwd

# p0=3,p1=2

method
  multidim_parameter_study		
    partitions = 2 2			

variables
  continuous_design = 2			
    lower_bounds    -2.0     -2.0	
    upper_bounds     2.0      2.0	
    descriptors      'x1'     'x2'	

interface
# This is masking a problem on Mac, where tests 4 and 6 don't work with fork
  system	#0,#2,#4,#6,#8,#p0
#  fork		#1,#3,#5,#7,#9,#p1
    # Testing workdir without concurrent evaluations is kind of silly
#    asynchronous evaluation_concurrency = 2	     	     	#1,#2,#9,#p1
    analysis_driver = 'dakota_workdir.py'			#0,#p0
#    analysis_driver = 'dakota_workdir.py tag'			#1,#p1
#    analysis_driver = 'dakota_workdir.py tag_save' 		#2
#    analysis_driver = 'dakota_workdir.py templatefiles' 	#3
#    analysis_driver = 'dakota_workdir.py templatedir' 		#4
#    analysis_driver = 'dakota_workdir.py templatefiles_copy' 	#5
#    analysis_driver = 'dakota_workdir.py templatedir_copy' 	#6
#    analysis_driver = 'templatedir_rosenbrock.py' 		#7
#    analysis_driver = 'dakota_workdir.py named_params' 	#8
#    analysis_driver = 'dakota_workdir.py saved_params' 	#9

    work_directory
      named 'trydir'
#	directory_tag						#1,#2,#9,#p1
#	directory_save  					#2,#9
# 	template_files = 'dakota_workdir.root.dat' 		#3,#5
# 	template_directory = 'dakota_workdir.templatedir'	#4,#6
#         copy							#5,#6
# 	template_directory = 'dakota_workdir.templatedir'	#7
#	parameters_file = 'params.in'				#8
#	parameters_file = '/tmp/params.in'			#9
#	  file_save						#9

responses
  num_objective_functions = 1             
  no_gradients				
  no_hessians
