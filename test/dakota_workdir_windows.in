# Select work directory tests for Windows, taken from
# dakota_workdir.in (left) to tests in this file (right)
#  0 --> 0
#  1 --> 1
#  2 --> 2
#  5 --> 3
#  6 --> 4
#  8 --> 5
#  9 --> 6

method
  multidim_parameter_study		
    partitions = 2 2			
  output debug

variables
  continuous_design = 2			
    lower_bounds    -2.0     -2.0	
    upper_bounds     2.0      2.0	
    descriptors      'x1'     'x2'	

interface
# If Python is registered to handle .py files, system calls will work,
# but fork requires a valid binary object as argv[0]
  system	#0,#2,#4,#5
#  fork		#1,#3,#6
#    asynchronous evaluation_concurrency = 2	     	     	#1,#2,#6
    analysis_driver = 'dakota_workdir.py'			#0
#    analysis_driver = 'C:/Python26/python.exe ../dakota_workdir_windows.py tag'			#1
#    analysis_driver = 'dakota_workdir.py tag_save' 		#2
#    analysis_driver = 'C:/Python26/python.exe ../dakota_workdir_windows.py templatefiles_copy' 	#3
#    analysis_driver = 'dakota_workdir.py templatedir_copy' 	#4
#    analysis_driver = 'dakota_workdir.py named_params' 	#5
#    analysis_driver = 'C:/Python26/python.exe ../dakota_workdir_windows.py saved_params' 	#6

    work_directory
      named 'trydir'
# TODO: disable tag for p0 depending on parallel concurrency
#	directory_tag						#1,#2,#6
#	directory_save  					#2,#6
# 	copy_files = 'dakota_workdir_windows.root.dat' 			#3
#	copy_files = 'dakota_workdir_windows.templatedir/*'		#4
#	parameters_file = 'params.in'				#5,#6
#	  file_save						#6

responses
  objective_functions = 1             
  no_gradients				
  no_hessians
