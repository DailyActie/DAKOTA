#@ s1: TimeoutAbsolute=2100
#@ s5: TimeoutAbsolute=1800
# DAKOTA INPUT FILE - dakota_nomad.in

# Each DAKOTA test file is capable of running multiple tests. The
# manual process for doing this is to add or uncomment specific lines
# needed for a test and comment out other lines which are not needed
# for that specific test.  Within the automatic test script, a special
# syntax is used to automatically determine which lines are to be used
# for a specific test. A #n (0 - 9) is used to associate lines in the
# test file with a specific test.  The #s0 is used to designate lines
# which are to be run as part of the baseline test but not part of the
# other tests. To add multiple tests to a file add the #n to the
# trailing comment of a line, the dakota_test script will parse
# through the file uncommenting the lines marked for a specific test,
# and commenting out unneeded lines marked with the #s0. Specific lines
# can be included in multiple tests by adding multiple #n designaters
# seperated by a comma.

# timeout overrides: 1=TA2100 5=TA1800

environment,
#	tabular_graphics_data

method,
	mesh_adaptive_search
	seed = 1234
#       max_function_evaluations = 1000				#s5
#	max_iterations = 100					#s5
#	function_precision = 0.00000001				#s5
#	variable_neighborhood_search = 0.1			#s5
#	display_format = 'bbe obj'
#	display_all_evaluations	       				#s5
#	history_file = 'mads_history.log'			#s5

variables,
	continuous_design = 3
	  initial_point   -1.0    1.5   2.0
	  upper_bounds    10.0   10.0  10.0
	  lower_bounds   -10.0  -10.0 -10.0
	  descriptors      'x1'  'x2'  'x3'
#	discrete_design_range = 2				#s1,#s4,#s5
#	  initial_point      2     2				#s1,#s4,#s5
#	  lower_bounds       1     1				#s1,#s4,#s5
#	  upper_bounds       4     9				#s1,#s4,#s5
#	  descriptors      'y1'   'y2'				#s1,#s4,#s5
#       discrete_design_set					#s2,#s3,#s4,#s5
#         real = 2						#s2,#s4,#s5
#           num_set_values = 4 5				#s2,#s4,#s5
#           set_values = 1.2 2.3 3.4 4.5 1.2 3.3 4.4 5.5 7.7	#s2,#s4,#s5
#           descriptors      'y3'   'y4' 	       	       	#s2,#s4,#s5
#         integer = 2						#s3,#s4,#s5
#           num_set_values = 2 2	  			#s3,#s4,#s5
#           set_values = 4 7 8 9				#s3,#s4,#s5
#           descriptors      'z1'   'z2'			#s3,#s4,#s5

interface,
       direct							#s0,#s2,#s4
#	fork asynch evaluation_concurrency 4			#s1,#s3,#s5
	  analysis_driver = 'text_book'

responses,
	objective_functions = 1
#	nonlinear_inequality_constraints = 2			#s1,#s3,#s4
	no_gradients
	no_hessians
