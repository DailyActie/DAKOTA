# DAKOTA INPUT FILE - dakota_apps.in

# Each DAKOTA test file is capable of running multiple tests. The
# manual process for doing this is to add or uncomment specific lines
# needed for a test and comment out other lines which are not needed
# for that specific test.  Within the automatic test script, a special
# syntax is used to automatically determine which lines are to be used
# for a specific test. A #n (0 - 9) is used to associate lines in the
# test file with a specific test.  The #0 is used to designate lines
# which are to be run as part of the baseline test but not part of the
# other tests. To add multiple tests to a file add the #n to the
# trailing comment of a line, the dakota_test script will parse
# through the file uncommenting the lines marked for a specific test,
# and commenting out unneeded lines marked with the #0. Specific lines
# can be included in multiple tests by adding multiple #n designaters
# seperated by a comma.

# Tests:  asynch_pattern_search
# This set of tests was arrived at by creating an orthogonal array
# across the algorithm and execution parameters and then modifying it
# to eliminate unsupported combinations.
#   0- 22: serial tests (synch/asynch, blocking/nonblocking)
#  p0-p21: MPI parallel tests
# p22-p29: hybrid parallel tests (block/nonblock, peer/master, system/fork)

# Processor specification for automated parallel tests:
# p0=2, p1=2, p2=2, p3=2, p4=2, p5=2, p6=2, p7=2, p8=2, p9=3, p10=3, p11=2, p12=2, p13=2, p14=2, p15=2, p16=2, p17=2, p18=2, p19=2, p20=2, p21=3, p22=2, p23=2, p24=3, p25=3, p26=2, p27=2, p28=3, p29=3

method,
#	max_function_evaluations 500		#2,#5,#6,#8,#10,#11
#	max_function_evaluations 500		#13,#14,#20,#21,#22
#	max_function_evaluations 500		#p2,#p5,#p6,#p8,#p10,#p11
#	max_function_evaluations 500		#p13,#p14,#p20,#p21,#p22,#p23
#	max_function_evaluations 500		#p24,#p25,#p26,#p27,#p28,#p29
#	constraint_tolerance	1.e-6		#2,#4,#6,#8,#10,#12
#	constraint_tolerance	1.e-6		#14,#16,#18,#20
#	constraint_tolerance	1.e-6		#p2,#p4,#p6,#p8,#p10,#p12
#	constraint_tolerance	1.e-6		#p14,#p16,#p18,#p20,#p22,#p23
#	constraint_tolerance	1.e-6		#p24,#p25,#p26,#p27,#p28,#p29
#
	asynch_pattern_search
#		initial_delta = .5		#4,#9,#10,#11,#12,#13
#		initial_delta = .5		#15,#16,#19,#20
#		initial_delta = .5		#p4,#p9,#p10,#p11,#p12,#p13
#		initial_delta = .5		#p15,#p16,#p19,#p20,#p22,#p23
#		initial_delta = .5		#p24,#p25,#p26,#p27,#p28,#p29
#		contraction_factor = 0.25	#2,#3,#4,#6,#8,#9,#14,#15,#16
#		contraction_factor = 0.25	#19,#20,#21,#22,#p2,#p3,#p4,#p6
#		contraction_factor = 0.25	#p8,#p9,#p14,#p15,#p16
#		contraction_factor = 0.25	#p19,#p20,#p21,#p22,#p23
#		contraction_factor = 0.25	#p24,#p25,#p26,#p27,#p28,#p29
#		threshold_delta = 1.e-4		#2,#5,#6,#9,#10,#16
#		threshold_delta = 1.e-4		#17,#18,#19,#20
#		threshold_delta = 1.e-4		#p2,#p5,#p6,#p9,#p10,#p16
#		threshold_delta = 1.e-4		#p17,#p18,#p19,#p20,#p22,#p23
#		threshold_delta = 1.e-4		#p24,#p25,#p26,#p27,#p28,#p29
#		solution_target = 1.e-6		#2,#6,#7,#8,#9,#11,#12,#15
#		solution_target = 1.e-6		#18,#19,#21,#22,#p2,#p6,#p7,#p8
#		solution_target = 1.e-6		#p9,#p11,#p12,#p15,#p18,#p19
#		solution_target = 1.e-6		#p21,#p22,#p23,#p24,#p25,#p26
#		solution_target = 1.e-6		#p27,#p28,#p29
#		synchronization blocking	#1,#6,#8,#11,#12,#13,#14
#		synchronization blocking	#15,#16,#17,#18,#19,#20,#22
		synchronization blocking	#0,#p0,#p1,#p6,#p8,#p11,#p12
#		synchronization blocking	#p13,#p14,#p15,#p16,#p17,#p18
#		synchronization blocking	#p19,#p20,#p22,#p23,#p24,#p25
#		linear_equality_constraint_matrix = 2. 1. 1.	#3,#5,#8,#9
#		linear_equality_constraint_matrix = 2. 1. 1.	#11,#13,#15,#16
#		linear_equality_constraint_matrix = 2. 1. 1.	#17,#18,#21,#22
#		linear_equality_constraint_matrix = 2. 1. 1.	#p3,#p5,#p8,#p9
#		linear_equality_constraint_matrix = 2. 1. 1.	#p11,#p13,#p15
#		linear_equality_constraint_matrix = 2. 1. 1.	#p16,#p17
#		linear_equality_constraint_matrix = 2. 1. 1.	#p18,#p21
#		linear_equality_targets = 4.0			#3,#5,#8,#9
#		linear_equality_targets = 4.0			#11,#13,#15,#16
#		linear_equality_targets = 4.0			#17,#18,#21,#22
#		linear_equality_targets = 4.0			#p3,#p5,#p8,#p9
#		linear_equality_targets = 4.0			#p11,#p13,#p15
#		linear_equality_targets = 4.0			#p16,#p17
#		linear_equality_targets = 4.0			#p18,#p21
#		linear_inequality_constraint_matrix = 1. 1. 1.	#1,#2,#3,#10
#		linear_inequality_constraint_matrix = 1. 1. 1.	#11,#14,#16
#		linear_inequality_constraint_matrix = 1. 1. 1.	#18,#19,#21,#22
#		linear_inequality_constraint_matrix = 1. 1. 1.	#p1,#p2,#p3
#		linear_inequality_constraint_matrix = 1. 1. 1.	#p10,#p11,#p14
#		linear_inequality_constraint_matrix = 1. 1. 1.	#p16,#p18
#		linear_inequality_constraint_matrix = 1. 1. 1.	#p19,#p21
#		linear_inequality_upper_bounds = 5.0		#1,#2,#3,#10
#		linear_inequality_upper_bounds = 5.0		#11,#14,#16
#		linear_inequality_upper_bounds = 5.0		#18,#19,#21,#22
#		linear_inequality_upper_bounds = 5.0		#p1,#p2,#p3
#		linear_inequality_upper_bounds = 5.0		#p10,#p11,#p14
#		linear_inequality_upper_bounds = 5.0		#p16,#p18
#		linear_inequality_upper_bounds = 5.0		#p19,#p21
#		merit_function merit_max		#11,#14,#19
#		merit_function merit_max		#p11,#p14,#p19
#		merit_function merit_max_smooth		#1,#7,#15,#20
#		merit_function merit_max_smooth		#p1,#p7,#p15,#p20
#		merit_function merit1			#17
#		merit_function merit1			#p17
#		merit_function merit1_smooth		#4,#6
#		merit_function merit1_smooth		#p4,#p6
#		merit_function merit2			#3,#21,#22
#		merit_function merit2			#p3,#p21
#		merit_function merit2_squared		#13,#18
#		merit_function merit2_squared		#p13,#p18
#		constraint_penalty = 1000.0		#5,#7,#9,#13,#15
#		constraint_penalty = 1000.0		#17,#18,#19
#		constraint_penalty = 1000.0		#p5,#p7,#p9,#p13,#p15
#		constraint_penalty = 1000.0		#p17,#p18,#p19
#		smoothing_factor = 1.0			#4,#5,#6,#7,#9
#		smoothing_factor = 1.0			#11,#14,#15,#17
#		smoothing_factor = 1.0			#p4,#p5,#p6,#p7,#p9
#		smoothing_factor = 1.0			#p11,#p14,#p15,#p17

variables,
	continuous_design = 3
		initial_point	-1.0    1.5   2.0
		upper_bounds	10.0   10.0  10.0	#0,#p0
#		upper_bounds	10.0   10.0  10.0	#1,#2,#4,#8,#9,#11
#		upper_bounds	10.0   10.0  10.0	#17,#18,#20,#21,#22
#		upper_bounds	10.0   10.0  10.0	#p1,#p2,#p4,#p8
#		upper_bounds	10.0   10.0  10.0	#p9,#p11,#p17,#p18
#		upper_bounds	10.0   10.0  10.0	#p20,#p21,#p22,#p23,#p24
#		upper_bounds	10.0   10.0  10.0	#p25,#p26,#p27,#p28,#p29
		lower_bounds   -10.0  -10.0 -10.0	#0,#p0
#		lower_bounds   -10.0  -10.0 -10.0	#1,#3,#5,#8,#9,#12,#13
#		lower_bounds   -10.0  -10.0 -10.0	#14,#18,#19,#20,#21,#22
#		lower_bounds   -10.0  -10.0 -10.0	#p1,#p3,#p5,#p8
#		lower_bounds   -10.0  -10.0 -10.0	#p9,#p12,#p13,#p14
#		lower_bounds   -10.0  -10.0 -10.0	#p18,#p19,#p20,#p21
#		lower_bounds   -10.0  -10.0 -10.0	#p22,#p23,#p24,#p25
#		lower_bounds   -10.0  -10.0 -10.0	#p26,#p27,#p28,#p29
#		scale_types	'value'			#1,#3,#5,#8,#10,#11,#12
#		scale_types	'value'			#15,#17,#19,#20,#21,#22
#		scale_types	'value'			#p1,#p3,#p5,#p8
#		scale_types	'value'			#p10,#p11,#p12,#p15
#		scale_types	'value'			#p17,#p19,#p20,#p21
#		scales		5.0   1.5   2.0		#1,#3,#5,#8,#10,#11,#12
#		scales		5.0   1.5   2.0		#15,#17,#19,#20,#21,#22
#		scales		5.0   1.5   2.0		#p1,#p3,#p5,#p8
#		scales		5.0   1.5   2.0		#p10,#p11,#p12,#p15
#		scales		5.0   1.5   2.0		#p17,#p19,#p20,#p21
		descriptors	'x1'  'x2'  'x3'

interface,
	system					#0,#2,#3,#13,#15,#18,#20
#	system					#p0,#p2,#p3,#p13,#p15,#p18
#	system					#p20,#p22,#p24,#p26,#p28
#	fork					#1,#4,#5,#7,#8,#11,#16,#19
#	fork					#p1,#p4,#p5,#p7,#p8,
#	fork					#p11,#p16,#p19
#	fork					#p23,#p25,#p27,#p29
#       direct					#6,#9,#10,#12,#14,#17,#21,#22
#       direct					#p6,#p9,#p10,#p12,#p14,#p17,#p21
		asynchronous			#0,#3,#7,#8,#11,#18,#19,#20
#		asynchronous			#p0,#p3,#p7,#p8,#p11,#p18,#p19
#		asynchronous			#p20,#p22,#p23,#p24,#p25,#p26
#		asynchronous			#p27,#p28,#p29
#		evaluation_concurrency 10	#3,#8,#18,#19
#		evaluation_concurrency 2	#p22,#p23,#p24,#p25
#		evaluation_concurrency 2	#p26,#p27,#p28,#p29
#		evaluation_scheduling master	#p24,#p25,#p28,#p29
		analysis_driver = 'text_book'

responses,
	objective_functions = 1
#	nonlinear_equality_constraints = 1		  #1,#3,#4,#5,#6
#	nonlinear_equality_constraints = 1		  #9,#11,#15,#18
#	nonlinear_equality_constraints = 1		  #p1,#p3,#p4,#p5,#p6
#	nonlinear_equality_constraints = 1		  #p9,#p11,#p15,#p18
#		nonlinear_equality_targets = -.2	  #1,#3,#4,#5,#6
#		nonlinear_equality_targets = -.2	  #9,#11,#15,#18
#		nonlinear_equality_targets = -.2	  #p1,#p3,#p4,#p5,#p6
#		nonlinear_equality_targets = -.2	  #p9,#p11,#p15,#p18
#	nonlinear_inequality_constraints = 2	  #4,#5,#7,#13,#14,#15
#	nonlinear_inequality_constraints = 2	  #17,#18,#19,#20,#21,#22
#	nonlinear_inequality_constraints = 2	  #p4,#p5,#p7,#p13
#	nonlinear_inequality_constraints = 2	  #p14,#p15,#p17,#p18
#	nonlinear_inequality_constraints = 2	  #p19,#p20,#p21,#p22,#p23
#	nonlinear_inequality_constraints = 2	  #p24,#p25,#p26,#p27,#p28,#p29
#	nonlinear_inequality_lower_bounds = 0.0 0.0	  #22
#	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50 #22
	no_gradients
	no_hessians
