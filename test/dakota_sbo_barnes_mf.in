# DAKOTA INPUT FILE - dakota_sbo_barnes.in

# Demonstrates the use of approximation models and a trust region
# optimization environment in performing constrained minimization on
# the textbook test function.
#
# Each DAKOTA test file is capable of running multiple tests. The
# manual process for doing this is to add or uncomment specific lines
# needed for a test and comment out other lines which are not needed
# for that specific test.  Within the automatic test script, a special
# syntax is used to automatically determine which lines are to be used
# for a specific test. A #n (0 - 9) is used to associate lines in the
# test file with a specific test.  The #0 is used to designate lines
# which are to be run as part of the baseline test but not part of the
# other tests. To add multiple tests to a file add the #n to the
# trailing comment of a line, the dakota_test script will parse
# through the file uncommenting the lines marked for a specific test,
# and commenting out unneeded lines marked with the #0. Specific lines
# can be included in multiple tests by adding multiple #n designaters
# seperated by a comma.

# These tests exercise global, local, and multipoint surrogates for
# feasible and infeasible starting points with and without constraint
# relaxation.

environment,
#	graphics
	method_pointer = 'SBLO'

method,
	id_method = 'SBLO'
	surrogate_based_local
	model_pointer = 'SURROGATE'
	approx_method_pointer = 'NLP'
	max_iterations = 50
	trust_region
	  initial_size = 0.10
	  contraction_factor = 0.5
#	  constraint_relax homotopy			#0,#1,#6,#7
	  expansion_factor   = 1.50
          acceptance_logic
	    filter                       		#0,#2,#4,#6
#           tr_ratio                     		#1,#3,#5,#7
          merit_function
	    augmented_lagrangian_merit     		#0,#4
#           lagrangian_merit               		#1,#5
#           adaptive_penalty               		#2,#6
#           penalty_merit                  		#3,#7
          approx_subproblem
#           THE FOLLOWING COMBINATION IS ERRONEOUS AND SHOULD NOT BE USED
#	    single_objective no_constraints
            single_objective original_constraints                 #0
#           single_objective linearized_constraints               #1
#           lagrangian_objective no_constraints                   #2
#           lagrangian_objective original_constraints             #3
#           lagrangian_objective linearized_constraints           #4
#           augmented_lagrangian_objective no_constraints         #5
#           augmented_lagrangian_objective original_constraints   #6
#           augmented_lagrangian_objective linearized_constraints #7

method,
	id_method = 'NLP'
	npsol
	  max_iterations = 50
	  convergence_tolerance = 1e-4

model,
	id_model = 'SURROGATE'
	surrogate hierarchical
          low_fidelity_model  = 'LOFI'
          high_fidelity_model = 'HIFI'
#         SECOND ORDER REQUIRES HESSIAN INFO
#         correction additive       second_order
#         correction multiplicative second_order
#         correction combined       second_order
          correction additive       first_order 	#0,#3,#6
#         correction multiplicative first_order 	#1,#4,#7
#         correction combined       first_order 	#2,#5
#         ZEROTH ORDER DOES NOT WORK WITH LAGRANGIAN MERIT FUNCTIONS
#         correction additive       zeroth_order
#         correction multiplicative zeroth_order
#         correction combined       zeroth_order

variables,
	continuous_design = 2
#   Feasible starting point
	  initial_point    30.   40.		#0,#1,#2,#3
# Infeasible starting point
#	  initial_point    65.    1.
# Infeasible starting point
#	  initial_point    10.   20.		#4,#5,#6,#7
	  lower_bounds      0.    0.
	  upper_bounds     80.   80.
	  descriptors      'x1'  'x2'

responses,
	objective_functions = 1
	nonlinear_inequality_constraints = 3
	nonlinear_inequality_lower_bounds = 0.     0.     0.
	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50 1.e+50
	analytic_gradients
	no_hessians

model,
	id_model = 'LOFI'
	single
	  interface_pointer = 'LOFI_FN'

interface,
	system #asynchronous
	id_interface = 'LOFI_FN'
 	  analysis_driver = 'barnes_lf'
	  parameters_file = 'LOFI.params.in'
	  results_file    = 'LOFI.results.out'
#	  file_tag file_save

model,
	id_model = 'HIFI'
	single
	  interface_pointer = 'HIFI_FN'

interface,
	system #asynchronous
	id_interface = 'HIFI_FN'
 	  analysis_driver = 'barnes'
	  parameters_file = 'HIFI.params.in'
	  results_file    = 'HIFI.results.out'
	  file_tag
	  file_save
