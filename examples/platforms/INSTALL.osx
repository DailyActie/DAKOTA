============================================
Modern Intel Macs - 10.5 (Leopard and later)
============================================

If you wish to use DAKOTA on a modern MacOS X platform, you have two
primary options:

    1. Installing the binary distribution of DAKOTA (recommended)
    2. Building the DAKOTA source distribution using GNU compilers
       (Coming soon: build notes using Intel compilers)

Option 1: Installing the binary distribution of DAKOTA

Extract the DAKOTA tarball into the desired installation location, e.g. $HOME.
Assuming DAKOTA binary package has been extracted to $HOME/Dakota, you can
modify the PATH as follows:

export PATH=$HOME/Dakota/bin:$HOME/Dakota/test:$PATH:. # sh/bash

NOTE: there are several foundation, dynamic libraries bundled with dakota.
To ensure proper dakota runtime execution, prepend the DYLD_LIBRARY_PATH:

export DYLD_LIBRARY_PATH=$HOME/Dakota/bin:$DYLD_LIBRARY_PATH # sh/bash


Option 2: Building the DAKOTA source distribution using GNU compilers

Compilation of Dakota on MacOS X Darwin 9.4.0
10/14/2009

Installed the following packages

GNU compiler suite v4.3.2 -- in particular gfortran for compiling f90 code
OpenMPI-1.3.3 -- Message Passing Interface

Configure/make/make install per usual:
  configure --without-graphics



==============================
OLDER Macs OS X 10.4.x (Tiger)
==============================

Brief guide to compiling DAKOTA on OLDER Mac OS X systems.  The following is
tested on 10.4.x Tiger.  User suggestions for particular problems appear at
the end.

==============================
Mac INSTALL Prerequistes/Notes
==============================

*. Install OS X Tiger 10.4 and apply all software updates.

*. Install XCodeTools 2.5 for Tiger.  Include the option for the X11
SDK, even if DAKOTA graphics support is not required (Customize >
Applications > X11).

There are a number of ways to get necessary gcc support (gcc-4.1 or
better with fortran 90 compiler), and optional graphics and MPI
support.  What follows is one way to accomplish this.  Other common
way include downloading the tools available from
http://hpc.sourceforge.net or using fink.

*. Install MacPorts-1.6.0 via binary package, follow directions on
macports.org to update macports and include necessary profile options
to put macports on your PATH (/opt/local/...).

*. Installl gcc-4.3 compilers (and dependencies):

  port install gcc43

*. DAKOTA configure will now work without MPI, without graphics, given
options to select the correct compiler and BLAS libraries:

./configure --disable-mpi --without-graphics CC=/opt/local/bin/gcc-mp-4.3 CXX=/opt/local/bin/g++-mp-4.3 F77=/opt/local/bin/gfortran-mp-4.3 FC=/opt/local/bin/gfortran-mp-4.3 --with-blas="-framework Accelerate"

*. If MPI support is desited, install OpenMPI, built against the
appropriate gcc, e.g.,

  port install openmpi configure.cc=macports-gcc-4.3

MacPorts MPICH should also work, but may be difficult to configure to
work with an alternate compiler.  Now DAKOTA should build with the
appropriate MPI options:

./configure --without-graphics CC=/opt/local/bin/gcc-mp-4.3 CXX=/opt/local/bin/g++-mp-4.3 F77=/opt/local/bin/gfortran-mp-4.3 FC=/opt/local/bin/gfortran-mp-4.3 MPICXX=/opt/local/bin/openmpicxx CXXFLAGS=-DMPICH_IGNORE_CXX_SEEK --with-blas="-framework Accelerate"

The MPICH_IGNORE_CXX_SEEK define is only required when building DAKOTA
with epetra support and OpenMPI.

*. If graphics support is desired, in addition to the installed X11
development libraries, a working Motif implementation is required:

  port install openmotif

(which will require extensive dependencies.)  A full configure of
DAKOTA should now work:

./configure CC=/opt/local/bin/gcc-mp-4.3 CXX=/opt/local/bin/g++-mp-4.3 F77=/opt/local/bin/gfortran-mp-4.3 FC=/opt/local/bin/gfortran-mp-4.3 MPICXX=/opt/local/bin/openmpicxx CXXFLAGS=-DMPICH_IGNORE_CXX_SEEK --with-blas="-framework Accelerate"

===============
TIPS From Users
===============

General Tip
-----------
The Porticus project ( http://porticus.alittledrop.com/ ) provides 
a Cocoa GUI frontend to the MacPorts project and is a convenient way 
to search for, install, and even uninstall the packages available. 
The project is free (donationware) but is not open-source.
-----------

Barron Bichon's system
----------------------
On a 64-bit Mac Pro running OS X 10.5.4 Leopard, DAKOTA has been 
successfully built using the following:
'g95 --version' gives: G95 (GCC 4.0.3 (g95 0.92!) May  2 2008)
'gcc --version' gives: i686-apple-darwin9-g++-4.0.1 (GCC) 4.0.1 (Apple Inc. build 5465)
'm4 --version' gives: GNU M4 1.4.6
'autoconf --version' gives: autoconf (GNU Autoconf) 2.61

None of these tools were installed via MacPorts. 
The g95 binary was downloaded from http://ftp.g95.org/ 
(the 'x86 OSX' Current Snapshot was used) and a softlink to the 
compiler added to the PATH. 
All other tools were included in the XCode Tools.

An MPI compiler is also included in the XCode Tools. 
However, /usr/bin/mpicxx is simply a softlink to 
/usr/bin/opal_wrapper - not sure what this is. 
Note that DAKOTA has been built with MPI support, but it has not been 
tested.

The configure line looks like: './configure --without-graphics F77=g95 FC=g95'

BLAS didn't have to be specified in the same way on the configure 
line as the examples above. 
However, /usr/lib/libblas.dylib is simply a softlink to the BLAS 
library in the Accelerate framework, i.e.:
'll /usr/lib/libblas.dylib' gives: /usr/lib/libblas.dylib -> ../..//System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/Versions/Current/libBLAS.dylib

Note that on OS X, the g95 compiler will spew a large amount of 
warnings that look something like:
/var/folders/ia/ia9yfdksHNW+keNRcuQd1k+++TI/-Tmp-//ccK5ZxOA.s:803:indirect jmp without `*'
These are annoying, but harmless. 
They can be suppressed by specifying the flag '-fno-pic'. 
This usually has no other impact, however, PIC is required to build 
dynamic libraries so if you intend to build DAKOTA as such, 
you'll have to live with the warnings.
----------------------
