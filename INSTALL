==============
DAKOTA INSTALL
==============

The Design Analysis Kit for Optimization and Terascale Applications
(DAKOTA) is a framework which provides access to a broad variety of
algorithms and services.  Downloading pre-built binaries from the
DAKOTA web site or accessing a site-supported installation are the
simplest routes to access DAKOTA.

For more experienced users, building DAKOTA from source allows
customization with additional packages and porting to additional
platforms or operating systems.  This INSTALL file, in conjunction
with platform-specific INSTALL.* files in Dakota/examples/platforms,
describe how to install pre-built binaries and setup the
environment, as well as how to compile from source code.


=================
Table of Contents
=================

Binary Distributions
Quick Start
Distributions and Checkouts
Basic Installation
Installation Details
Useful Environment Settings
Installing Commercial Libraries
Generating Local Documentation
Library Notes


====================
Binary Distributions
====================

DAKOTA binary distributions are provided in archive format (either
tar.gz or zip).  To get started, unpack the archive into a suitable
install location, e.g., /usr/local/Dakota or C:\Dakota.

Make sure the dakota executable (and optionally test files and current
directory) are available on the PATH, e.g.:
  export PATH=/usr/local/Dakota/bin:/usr/local/Dakota/test:$PATH:.:

For more details, see the Distributions and Checkouts section.


===========
Quick Start
===========

For DAKOTA source distributions, the basic source-based install
procedure is to use CMake to populate a build tree for the target platform with
generated Makefiles, and then to execute 'make'.  Given the large number of
supported packages, specifying a few 'cmake' options and
environment variables may be required.  Building the software with all
packages may take from 15 minutes to over an hour.  Typical process:

  0) Install CMake 2.8.4 (or later) and ensure it is in your $PATH
  1) gunzip Dakota_releasename.tar.gz
  2) tar xvf Dakota_releasename.tar
  3) mkdir BuildDakota; cd BuildDakota
  4) export PATH=$PATH:.
  5) cmake ../Dakota
     * see NOTE below regarding specifying location of Boost
  6) make [-j#]
  [optional] 7) make install
     * requires write privilege in CMAKE_INSTALL_PREFIX
       (see "Installation Details" below).
  [optional] 8) ./scripts/finish_install CMAKE_INSTALL_PREFIX
     * install DAKOTA dependencies and additional examples/tests into
       CMAKE_INSTALL_PREFIX

Note that support for the message-passing interface (MPI) and Fortran90
compilation may not be available on all platforms.  If your platform does NOT
have a Fortran90 compiler, you must build DAKOTA using the deprecated,
autotools technique (see additional notes below regarding "disable-f90").  If
your platform has the GNU Fortran90 compiler installed, please set the following
environment variable prior to building dakota to ensure compatible system,
shared-object libs, e.g.

  export F77=gfortran    # SH/BASH

Some packages (DOT, NPSOL, and NLPQL, in particular) are optional
commercial extensions which can be licensed separately and are not
included with the downloadable distributions.  These are disabled by
default.

The following sections explain the quick start steps in more detail.
The first two steps are described in the "Distributions and Checkouts"
section.  All subsequent steps are overviewed in the "Basic Installation" 
section, with additional details in the "Installation Details" section.


===========================
Distributions and Checkouts
===========================

Installation of DAKOTA can be done from a source distribution tar
file, a binary distribution tar file, or a checkout from the
Subversion repository.  Most users will install via one of the first
two methods, although developers with Subversion repository access
will employ the last.

For source or binary distribution tar files, the following steps are
needed to uncompress the tar file and extract the files:

   1) gunzip Dakota_releasename.tar.gz
   2) tar xvf Dakota_releasename.tar

These steps will create a distribution directory with the name Dakota.
For the binary distribution tar file, the executables are in
Dakota/bin.  If you have root privilege, you may want to post these to
a shared location (e.g., /usr/local/dakota/bin).  Refer to the "Getting
Started" section of the Users Manual for instructions on using the
executables.  For the source distribution tar file, refer to the "Basic
Installation" section below for instructions on building the source.

To access DAKOTA and associated packages directly from the Subversion
repositories, you must have access to the Sandia SRN and have
accounts on development.sandia.gov and software.sandia.gov. You will
also need specific developer group permissions to be set for your
accounts on these systems.  The table below shows the system, group and
contact information for Dakota and associated package repositories
currently available. (All contact e-mail addresses end with @sandia.gov.)

Package    System                  Group         Contact
---------  ----------------------  ------------  -------------
Dakota     software.sandia.gov     apache        Mike Eldred (mseldre)
ampl       software.sandia.gov     apache        Brian Adams (briadam)
boost      software.sandia.gov     apache        Bill Bohnhoff (wjbohnh)
pecos      software.sandia.gov     apache        Mike Eldred (mseldre)
surfpack   software.sandia.gov     apache        Brian Adams (briadam)
teuchos    software.sandia.gov     apache        Bill Bohnhoff (wjbohnh)
Acro       software.sandia.gov     apache        John Siirola (jdsiiro)
DDACE      software.sandia.gov     apache        Patty Hough (pdhough)
hopspack   software.sandia.gov     apache        Patty Hough (pdhough)
JEGA       software.sandia.gov     apache        John Eddy (jpeddy) 
OPT++      software.sandia.gov     apache        Patty Hough (pdhough)

For DAKOTA checkout from software.sandia.gov, you will need to
use Subversion 1.6 or later, and set the Subversion URL target
to the repository directory where DAKOTA resides (i.e.,
https://software.sandia.gov/svn/public/dakota).  Refer
to the DAKOTA Developers Manual for help installing and configuring
Subversion 1.6, and to the Subversion man pages for additional information
on svn (the checkout, diff, update, and commit commands are the
essential subset).  The following steps can then be executed:

   1) cd $HOME (or other appropriate directory)
   2) export SVNROOT=https://software.sandia.gov/svn/public/dakota # SH/BASH
   3) svn checkout $SVNROOT/private/trunk Dakota
   4) cd Dakota
   5) (optional) autoreconf -i -v   

It is no longer necessary to check out the libraries associated with
DAKOTA separately from their repositories, as Subversion externals
have been defined in DAKOTA for that purpose.  They will be checked
out as part of the DAKOTA checkout.  Command 5) creates the GNU
Autotools-generated files that can be used as a "worst-case" technique
to 'configure' DAKOTA (e.g. cmake does not work on a particular platform,
or perhaps, no Fortran90 compiler is available).

Following these steps, your subversion distribution will have the same
files as the source distribution tar file.  For further information on
installing the versions of the CMake used to configure DAKOTA,
consult the DAKOTA Developers Manual.


==================
Basic Installation
==================

For both the source distribution tar file and version control checkout 
cases, there should now be a Dakota directory containing the source code
and CMakeLists.txt files needed to enable builds.  Also provided
are the legacy autoconf-generated scripts, but these are deprecated as of
DAKOTA 5.2 and should only be used as a last resort.  External tools
acro, hopspack, DDACE, JEGA, OPTPP, ampl, boost, pecos, surfpack, and teuchos
are in Dakota/packages.

To build DAKOTA with all possible packages, some platform-dependent
software dependencies exist.  These include the Boost, Message Passing
Interface (MPI) library, the Basic Linear Algebra Subprograms (BLAS)
and Linear Algebra PACKage (LAPACK) libraries, X11 and Motif graphics
libraries, and availability of a Fortran90 compiler.  Of these, support
for MPI and X11/Motif graphics are not strict requirements since they can
be optionally omitted from the build using CMake's "configuration" options,
i.e. cmake variables that can be toggled-off when at "configure" time (see
"Installation Details" below).  However, Boost and BLAS/LAPACK support are
currently required.  Additionally, the default CMake build REQUIRES a Fortran90
compiler.  If building DAKOTA on a platform that does not have a Fortran90
compiler, users must fall-back to the legacy autotools build system (see
additional notes below regarding "disable-f90").

To the extent possible, CMake will automatically locate the required software
for the build; however, in some cases, it will need some assistance to supplement
or override the automatic detection capabilities.  See BuildSetup-*.cmake files
in the directory Dakota/examples/platforms for examples of this.  Additionally,
for help installing and running DAKOTA on specific operating systems or
platforms, refer to the appropriate INSTALL.* file (also in the platform subdir).

With respect to the MPI software, installation directories will vary
from platform to platform.  To utilize message-passing parallelism
within DAKOTA, it may be necessary to locate an MPI installation or
download and build your own.  DAKOTA will look for C++ wrapper scripts
provided by the MPI installation (such as mpicxx, mpiCC, or mpCC) to build
sources requiring MPI headers and to link executables requiring MPI
libraries.  In some cases (e.g., Sun, IBM, Red Storm), a
platform-optimized implementation of MPI is already provided as part
of the environment.  If the MPI libraries and header files are in  
standard locations searched by the compilers (e.g., /usr/lib and
/usr/include), then no additional setup is typically needed.

In cases where MPI is not a standard part of the environment (e.g.,
Cygwin, and some Linux or MacOSX variants), you will either need to locate an
MPI distribution installed by someone else (look for mpi or similar in
/usr/local, /usr/netpub, /usr/share, etc.) or you will need to
download MPI and build/install it yourself (MPICH downloads are
available from http://www-unix.mcs.anl.gov/mpi/mpich1/download.html 
and Sun HPC ClusterTools downloads are available from
http://www.sun.com/products/hpc/communitysource/download.html).

If the MPI installation is not in a default search location, then the
environment variable MPICXX must be set to the C++ wrapper script
provided by the local MPI installation prior to or at configuration-
time.  Examples of doing this are shown below:

   1) Setting the variable prior to running configure:
      setenv MPICXX <path_to_C++_mpi_wrapper> # CSH/TCSH
      export MPICXX=<path_to_C++_mpi_wrapper> # SH/BASH
      configure

   2) Setting the variable in the configure command:
      configure MPICXX=<path_to_C++_mpi_wrapper>

With respect to BLAS and LAPACK, these libraries are often optimized
for performance on particular chip architectures and are usually
provided as part of the environment.  In a few instances (Cygwin for
Windows, older Red Hat Linux, and some other Linux vendors), it may be
necessary to download and install BLAS/LAPACK (see
http://www.netlib.org/blas and http://www.netlib.org/lapack).  If
these libraries are not installed in a location normally searched by
the compilers (e.g., /usr/lib), or have non-standard library names (e.g.,
Intel MKL, AMD Core Math Library, or Sun Performance Library) then 
the path to these must be added to the $BLAS_LIBS and $LAPACK_LIBS 
environment variables (or to the -DBLAS_LIBS=<path_to_blas> and
-DLAPACK_LIBS=<path_to_lapack> 'cmake' options; see "Installation Details"
below for information about environment variables and Cygwin (PC Windows)
for an example).

Most platforms provide the X11 graphics libraries needed to compile
and link DAKOTA with graphics.  In some cases (e.g., older Red Hat
Linux, Mac OSX, Cygwin), it may be necessary to download and install
free implementations of X11 such as XFree86 (http://www.xfree86.org/)
or OpenMOTIF (http://www.opengroup.org/openmotif/).

Finally, use of Lawson/Hanson methods and the full features of the LHS
package require a Fortran90 compiler.  If the compiler is in a
nonstandard location, it may be necessary to specify it at configure
time, e.g., for the Portland Group compilers:

  cmake -DCMAKE_Fortran_COMPILER=pgf90 <path/to/source>

(or via the full path if it's not on your current path).
DAKOTA has been successfully built with the Intel, Portland Group, IBM/xlf90,
g95, and gfortran Fortran90 compilers.  gfortran is preferred to g95 at this
time.  If no Fortran90 compiler is available, DAKOTA features that
require it can ONLY be disabled with a (deprecated) autotools build, i.e.

  configure --disable-f90
    (Please consider this technique only as a last resort.)

At this point, the preliminaries have been completed and you are ready
to configure and build the software.  First, the platform-specific
Makefiles must be generated using CMake.  Executing cmake
without any options will result in an attempt to build with
as many vendor algorithms and packages as are available in the
distribution.  Finally, the Makefiles are executed by typing make.
The DAKOTA build process supports parallel make using multiple
processors by passing the -j option (for example, 'make -j4' compiles
4 source files concurrently during the build).  These steps are
summarized as follows:

   1) cd BuildDakota [or other build_dir name as appropriate]
   2) cmake [cmake options] <path/to/source>
   3) make [-j#]

Once make has successfully completed, the generated DAKOTA executables
(dakota and dakota_restart_util) will reside in Dakota/src.  Copies
of the executables will be placed in CMAKE_INSTALL_PREFIX/bin and copies of the
libraries (libdakota.a et al.) are placed in CMAKE_INSTALL_PREFIX/lib, where
CMAKE_INSTALL_PREFIX is specified as a path argument to the
-DCMAKE_INSTALL_PREFIX=<path> 'cmake' option (see "Installation Details" below).


====================
Installation Details 
====================

The CMake utility attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a 'Makefile' in each directory of the package.
It may also create one or more *.h files containing system-dependent
definitions.  Finally, it caches the variables in a 'CMakeCache.txt' file that
can be examined to verify the current configuration (and can also be useful for
debugging 'cmake').

The simplest way to compile a package is:

  1. 'mkdir' and 'cd' to the newly created build directory which will contain
     the package's binary targets and type 'cmake' to generate the packages
     Makefiles for your system.

  2. Type 'make' to compile the package.

  3. Type 'make install' to install the programs and any data files and
     documentation.

     The executables will be installed in the bin/ subdirectory of the
     CMAKE_INSTALL_PREFIX directory specified. (Default CMAKE_INSTALL_PREFIX
     is /usr/local; see "Installation Names" below.)

  4. The program binaries and object files can be removed from the
     build directory by typing 'make clean'.


=====================
Compilers and Options
=====================

Initial values for configuration parameters can be passed to 'cmake' 
by setting variables in the command line or in the environment.  Here
is a command-line example:

  CFLAGS=-O2 cmake -DCMAKE_C_COMPILER=c89


==============================================================
Compiling For Multiple Architectures/Specifying Boost Location
==============================================================

The package can be compiled for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.

Prior to building DAKOTA in an empty build directory, the location of the
Boost libraries must be identified if not installed in a system area.
If Boost is already installed on the system, then it is generally easy 
for CMake to determine and set the proper paths in the generated Makefiles
so compilation of the DAKOTA sources can proceed.

If Boost has NOT been installed in a system area, it MUST be built and installed
by the user prior to building DAKOTA.  Please ensure that a binary
compatible version of the Boost libraries are avaiable PRIOR to building DAKOTA.

DAKOTA uses a subset of Boost (and for convenience provides Boost 1.45 source
files in Dakota/packages) consisting of several header-only Boost components
PLUS the following set of library components:  Boost.Signals, Boost.Regex,
Boost.Filesystem, and Boost.System.

In addition to the Boost source files, the DAKOTA "snapshot" also contains
autotools and CMake build-harnesses for the four libraries that must be
installed prior to initiating a DAKOTA build.  If users prefer BJAM for
building Boost components, they should follow the guidelines for download,
build, install provided at the boost.org website.

Please note that many system Boost installations DO NOT meet the minimum 
minimum version requirement for DAKOTA (Boost 1.40 or higher).  Attempting to
build DAKOTA against a Boost installation earlier than 1.40 will result in a
CMake error.

Having determined the location of the Boost installation, 'cd' to the build
directory where you want the object files and executables to go and run
'cmake'.  Since DAKOTA does not support in-source build trees, the directory
containing the source tree must be specified as an argument to 'cmake'.  One
technique for providing the location of Boost is via command line argument to
'cmake', e.g.

  cmake -DBoost_INCLUDE_DIR=<dirpath_to_boost_inc> <dirpath_to_dakota_src>

Run 'cmake --help' for additional options.


==================
Installation Names
==================

By default, 'make install' will try to install the package's files in
'CMAKE_INSTALL_PREFIX/bin', 'CMAKE_INSTALL_PREFIX/man', etc.  Please note
the default CMAKE_INSTALL_PREFIX is /usr/local.
An alternate installation directory can be specified by 
giving 'cmake' the option '-DCMAKE_INSTALL_PREFIX=<dir>'.

Separate installation directories for architecture-specific files and 
architecture-independent files can be specified.  If you
give 'cmake' the option '-DCMAKE_INSTALL_EXEC_PREFIX=<dir>', the package will
use <dir> as the directory for installing programs and libraries.
Documentation and other data files will still be installed using the 
regular CMAKE_INSTALL_PREFIX.


==================
Defining Variables
==================

Some key variables, such as compiler and compiler flags, can be set in the
environment passed to 'cmake'.  For example:

  CC=/usr/local2/bin/gcc cmake <path/to/source>
or
  cmake -DCMAKE_C_COMPILER=/usr/local2/bin/gcc <path/to/source>

will cause the specified gcc to be used as the C compiler.


===========================
Useful Environment Settings
===========================

Add man page paths for MPI and DAKOTA Manuals:
  export MANPATH=<your_default_man_paths>:<path_to_mpi_installation>/man:<path_to_your_dakota>/docs/man-dev:<path_to_your_dakota>/docs/man-ref

If you encounter difficulties with missing shared object libraries
when trying to run a dakota executable, additions to your
$LD_LIBRARY_PATH environment variable can instruct the run-time linker
where to find the missing libraries, e.g.,

Add search paths for shared object libraries:
  export LD_LIBRARY_PATH=/usr/local/X11R5/lib:$LD_LIBRARY_PATH


===============================
Installing Commercial Libraries
===============================

DOT, NPSOL, and NLPQL are commercial optimization libraries that are optional
extensions to the DAKOTA toolkit.  DOT is licensed by Vanderplaats Research and
Development (http://www.vrand.com/dot.htm); NPSOL is licensed by Stanford
Business Software (http://www.sbsi-sol-optimize.com/NPSOL.htm); and NLPQL is
licensed by Prof. Klaus Schittkowski
(http://www.uni-bayreuth.de/departments/math/~kschittkowski/nlpqlp.htm).  Refer
to these sites for licensing fees and policies.

It is preferable to license the source code, although target platform
object libraries may also be workable with configuration modifications.  
These distributions should be installed in the Dakota/packages/DOT,
Dakota/packages/NPSOL, and Dakota/packages/NLPQL directories prior to 
building DAKOTA.  

In a DOT source distribution, the files of interest are DDOT1.FOR through 
DDOT6.FOR, which should be renamed dot1.f through dot6.f and placed in the 
Dakota/packages/DOT/dbl_prec directory.  

In NPSOL 5.0 source distributions, the required Fortran files are 
npUnix/src/*.f and npUnix/examples/*.f.  These files should be copied to the 
Dakota/packages/NPSOL directory.  For older NPSOL versions, refer to 
the comments in Dakota/packages/NPSOL/Makefile.in for the required 
Fortran files.  In a NLPQL distribution, the required Fortran files are
NLPQLP20.FOR and QL.FOR, which should be renamed to NLPQLP20.f and QL.f and 
placed in the Dakota/packages/NLPQL directory.

DOT source modifications: In dot1.f, modify the parameter list of
SUBROUTINE DOT to pass the parameter NGOTOZ as its second parameter.
This allows DAKOTA to monitor when DOT is performing finite
differencing, versus when DOT is performing the line search.  If this
modification to DOT cannot be performed, then Dakota/src/DOTOptimizer.C 
must be modified to be consistent with the unmodified DOT parameter list.

NPSOL _required_ source modifications: 
Version 4: In f06subs.f, comment out the "ENTRY" statements which alias the
           supplied NAG F06 routines to BLAS level 1 and level 2 routines
           (the ENTRY statements with names DAXPY, DCOPY, DDOT, DNRM2,
           DSCAL, DSWAP, IDAMAX, DROT, DGEMV, DGER, DSYMV, DSYR, DTRMV, and
           DTRSV, as listed in the f06subs.f header).  This modification 
           prevents use of BLAS routines elsewhere in DAKOTA from picking
           up the NAG f06 routines (which allows consistent usage of the 
           latest platform-optimized BLAS).  In addition, replace the 
           NPSRC, NPOBJ, MAINSRC, MAINOBJ, and PGMS Makefile macros as 
           documented in Dakota/packages/NPSOL/Makefile.in.
Version 5: No modifications necessary.

NPSOL _optional_ source modifications: 
Versions 4 and 5 (line numbers are for Version 5):
           In lssolsubs.f, subroutine lscrsh, change line #1979 to
              if(wx(j) .le. b1) then is = 1
           and change line #1982 to
              if(wx(j) .ge. b2) then is = 2
           This source code modification alleviates a problem in which 
           NPSOL evaluates a different initial point than is specified 
           by the user in the DAKOTA input file.


==============================
Generating Local Documentation
==============================

The DAKOTA Users, Developers, and Reference Manuals are maintained in
Dakota/docs.  

To build a local copy of the Users Manual, include the
'-DENABLE_DAKOTA_DOCS=on' command line argument to 'cmake'.  This feature is
only supported on UNIX platforms.

To build a local copy of the Developers and Reference manuals in HTML,
LaTeX, and man page formats, you will need the doxygen tool available for
download from http://www.doxygen.org under GNU GPL terms.  Once doxygen is
downloaded and installed, the commands are:

  cd docs
  doxygen Doxyfile       [Developers Manual]
  doxygen Doxyfile-ref   [Reference Manual]

These steps generate HTML, man pages and raw LaTeX source.  To process the
LaTeX source and convert it to a Postscript or PDF manual for printing, a
Makefile is provided for which you can use one or more of the following
make commands:

  cd latex-dev           [Developers Manual]
  make                   [generates refman.dvi, refman.ps, and refman.pdf]

These same commands can be replicated for the Reference Manual latex
source in docs/latex-ref.  For the highest quality Postscript 
or PDF manual, Dakota/docs/README.latex provides instructions for
fine-tuning of chapter numbering and Dakota/docs/latex_modify.perl
provides a Perl utility for automating these modifications.

To access the man pages with the man command, add the <DAK_BUILD_DIR>/docs/man
and <DAK_BUILD_DIR>/docs/man-ref directories to your $MANPATH as described in
the Useful Environment Settings section.


=============
Library Notes
=============

Library versions that are distributed with DAKOTA have been tested for
a particular DAKOTA release.  Links to the latest versions of these
libraries can be found at
http://dakota.sandia.gov/packages.html.  When upgrading to the
latest libraries, modifications to the supporting DAKOTA code (e.g.,
the wrapper class) may be required. Sharing upgrades of this type with
the development team is greatly appreciated.  Direct messages to
dakota-developers@development.sandia.gov.
