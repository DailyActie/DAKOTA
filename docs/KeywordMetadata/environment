Blurb::
Specifies the top level technique which will govern the management of iterators and models
Description::
The environment section in a %Dakota input file specifies the top
level solution environment which will govern the management of
iterators and models in the solution of the problem of interest.

The environment specification supports indentification of the
top-level method (\c top_method_pointer) that provides the starting
point for the iteration. The corresponding method specification may
recurse with additional sub-method pointers in the case of
"meta-iteration" (see \ref method) or may specify a single method
without recursion. Either case will ultimately result in
identification of one or more model specifications using \c
model_pointer, which again may or may not
involve further recursion (see \ref model-nested and \ref
model-surrogate for recursion cases). Each of the model specifications
identify the variables and responses specifications (using \ref
model-variables_pointer and \ref model-responses_pointer)
that are used to build the model, and depending on the type of model,
may also identify an interface specification (for example, using \ref
model-single-interface_pointer). If one of these
specifications does not provide an optional pointer, then that
component will be constructed using the last specification parsed.
 
In addition to the \c top_method_pointer, the environment specification
provides a variety of output controls, including graphics options, data
tabulation options, output precision, and results database options.
 
Specification of a environment block in an input file is optional, in
which case the top level method will be inferred. In the case of a
single method specification, there is no ambiguity, and in the case of
multiple method specifications, the top level method will be deduced
from the hierarchical relationships implied by method pointers. If
this inference is not well defined (e.g., multiple method
specifications without any pointer relationship), then the default
behavior is to employ the last method specification parsed.


<b> Optional Keywords </b>
Additional keywords are used to modify
the Dakota outputs - graphics and data, as well as how Dakota
will handle methods that run concurrently.

Topics::	block, not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	
