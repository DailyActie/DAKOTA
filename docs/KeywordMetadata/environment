Blurb:: Top-level settings for %Dakota execution
Description::

The environment section in a %Dakota input file is optional.  It
specifies the top-level solution environment, optionally including
output controls and identification of the primary iterative method.
The output-related keywords address graphics, generation of tabular
and results data, and the precision of numerical output.

The \c top_method_pointer keyword is typically used in Dakota studies
consisting of more than one \ref method block to clearly indicate
which is the leading method.  This method provides the starting point
for the iteration. The corresponding method specification may recurse
with additional sub-method pointers in the case of "meta-iteration"
(see \ref method) or may specify a single method without
recursion. Either case will ultimately result in identification of one
or more model specifications using \c model_pointer, which again may
or may not involve further recursion (see \ref model-nested and \ref
model-surrogate for recursion cases). Each of the model specifications
identify the variables and responses specifications (using \ref
model-variables_pointer and \ref model-responses_pointer) that are
used to build the model, and depending on the type of model, may also
identify an interface specification (for example, using \ref
model-single-interface_pointer). If one of these specifications does
not provide an optional pointer, then that component will be
constructed using the last specification parsed.
 
When the environment block is omitted, the top level method will be
inferred as follows: When a single method is specified, there is no
ambiguity and the sole method will be the top method.  When multiple
methods are specified, the top level method will be deduced from the
hierarchical relationships implied by method pointers. If this
inference is not well defined (e.g., there are multiple method
specifications without any pointer relationship), then the default
behavior is to employ the last method specification parsed.

Topics::	block
Examples::
Theory::
Faq::
See_Also::	
