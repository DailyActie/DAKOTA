Blurb::
Define how Dakota should run a function evaluation
Description::
The required \c analysis_drivers keyword provides the names of
executable analysis programs or scripts, a.k.a. "drivers" which comprise a function
evaluation. The optional and required sub-keywords specify how Dakota will
manage directories and files, and run the driver(s).

<b> Types of Interfaces </b>

Dakota has two recommended ways of running analysis drivers: 
\li as an external processes (\c fork), or 
\li using internal code to couple to the analysis driver (\c direct)

Other options are available for advanced users, and are not as well documented, supported, or tested:
\li external processes (\c system)
\li internal coupling (\c python, \c matlab, \c scilab, \c grid)

<b> Use Cases </b>

The internally coupled codes have few options because many of the details are
already handled with the coupling.
Their behavior is described in the \ref interface-analysis_drivers-direct keyword. 

For external processes using the \ref interface-analysis_drivers-fork keyword, 

A function evaluation may comprise:
-# <i>A single analysis driver</i>: Function evaluation, including all pre- and 
   post-processing is contained entirely within a single script/executable. <br>
-# <i>A single analysis driver with filters</i>: Function evaluation is 
   explicitly split into pre-processing (performed by the input filter), 
   analysis, and post-processing (by the output filter).
-# <i>A single analysis driver with environment variables</i>: Function 
   evaluation is contained within one analysis driver, but it requires
   environment variables to be set before running.
-# <i>Multiple analysis drivers</i>: Drivers are run sequentially or concurrently
   (See the \c asynchronous keyword) and can have any of the above options as
   well.

For details and examples see the Simulation Interface
Components section of the Interfaces chapter of the User's Manual; for
details on the filters and environment variables, see the subsection on
Syntax for Filter and Driver Strings.

Topics::	problem
Examples::
Theory::
Faq::
See_Also::	
