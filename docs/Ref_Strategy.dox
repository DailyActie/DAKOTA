namespace Dakota {

/** \page StratCommands Strategy Commands

\htmlonly
<b>Strategy Commands Table of Contents</b>
<ul>
<li> <a href="StratCommands.html#StratDescr">Strategy Description</a>
<li> <a href="StratCommands.html#StratSpec">Strategy Specification</a>
<li> <a href="StratCommands.html#StratIndControl">
     Strategy Independent Controls</a>
<li> <a href="StratCommands.html#StratHybrid">Hybrid Minimization Commands</a>
<li> <a href="StratCommands.html#StratMultiStart">
     Multistart Iteration Commands</a>
<li> <a href="StratCommands.html#StratParetoSet">
     Pareto Set Optimization Commands</a>
<li> <a href="StratCommands.html#StratSingle">Single Method Commands</a>
</ul>
\endhtmlonly


\section StratDescr Strategy Description


The strategy section in a DAKOTA input file specifies the top level
technique which will govern the management of iterators and models in
the solution of the problem of interest. Four strategies currently
exist: \c hybrid, \c multi_start, \c pareto_set, and \c single_method.
These algorithms are implemented within the Strategy "Strategy" class
hierarchy in the CollaborativeHybridStrategy, EmbeddedHybridStrategy,
SequentialHybridStrategy, ConcurrentStrategy, and SingleMethodStrategy
classes.  For each of the strategies, a brief algorithm description is
given below.  Additional information on the algorithm logic is
available in the Users Manual [\ref UsersMan "Adams et al., 2010"].

In a hybrid minimization strategy (\c hybrid), a set of methods is
specified which will be used synergistically in seeking an optimal
design.  The relationships among the methods are categorized as
collaborative, embedded, or sequential.  The goal in each case is to
exploit the strengths of different optimization and nonlinear least
squares algorithms through different stages of the minimization
process. Global/local hybrids (e.g., genetic algorithms combined with
nonlinear programming) are a common example in which the desire for
identification of a global optimum is balanced with the need for
efficient navigation to a local optimum.

In the multi-start iteration strategy (\c multi_start), a series of
iterator runs are performed for different values of parameters in the
model.  A common use is for multi-start optimization (i.e., different
local optimization runs from different starting points for the design
variables), but the concept and the code are more general.  An
important feature is that these iterator runs may be performed
concurrently.

In the pareto set optimization strategy (\c pareto_set), a series of
optimization or least squares calibration runs are performed for
different weightings applied to multiple objective functions.  This
set of optimal solutions defines a "Pareto set," which is useful for
investigating design trade-offs between competing objectives.  Again,
these optimizations can be performed concurrently, similar to the
multi-start strategy discussed above.  The code is similar enough to
the \c multi_start technique that both strategies are implemented in
the same ConcurrentStrategy class.

Lastly, the \c single_method strategy is a "fall through" strategy in
that it does not provide control over multiple iterators or multiple
models.  Rather, it provides the means for simple execution of a
single iterator on a single model.

Each of the strategy specifications identifies one or more method
pointers (e.g., \c method_list, \c method_pointer) to identify the
iterators that will be used in the strategy.  These method pointers
are strings that correspond to the \c id_method identifier strings
from the method specifications (see \ref MethodIndControl). These
string identifiers (e.g., 'NLP1') should \e not be confused with
method selections (e.g., \c dot_mmfd).  Each of the method
specifications identified in this manner has the responsibility for
identifying corresponding model specifications (using \c model_pointer
from \ref MethodIndControl), which in turn identify the variables,
interface, and responses specifications (using \c variables_pointer,
\c interface_pointer, and \c responses_pointer from \ref
ModelCommands) that are used to build the model used by the iterator.
If one of these specifications does not provide an optional pointer,
then that component will be constructed using the last specification
parsed.  In addition to method pointers, a variety of graphics options
(e.g., \c tabular_graphics_data), iterator concurrency controls (e.g.,
\c iterator_servers), and strategy data (e.g., \c starting_points) can
be specified.

Specification of a strategy block in an input file is optional, with
\c single_method being the default strategy.  If no strategy is
specified or if \c single_method is specified without its optional \c
method_pointer specification, then the default behavior is to employ
the last method, variables, interface, and responses specifications
parsed. This default behavior is most appropriate if only one
specification is present for method, variables, interface, and
responses, since there is no ambiguity in this case.

Example specifications for each of the strategies follow. A \c
hybrid example is:
\verbatim
strategy,
	hybrid sequential
	  method_list = 'GA', 'PS', 'NLP'
\endverbatim

A \c multi_start example specification is:
\verbatim
strategy,
	multi_start
	  method_pointer = 'NLP1'
	  random_starts = 10
\endverbatim

A \c pareto_set example specification is:
\verbatim
strategy,
	pareto_set
	  method_pointer = 'NLP1'
          random_weight_sets = 10
\endverbatim

And finally, a \c single_method example specification is:
\verbatim
strategy,
	single_method
	  method_pointer = 'NLP1'
\endverbatim


\section StratSpec Strategy Specification


The strategy specification has the following structure:
\verbatim
strategy,
	<strategy independent controls>
	<strategy selection>
	  <strategy dependent controls>
\endverbatim

where <tt>\<strategy selection\></tt> is one of the following: \c
hybrid, \c multi_start, \c pareto_set, or \c single_method.

The <tt>\<strategy independent controls\></tt> are those controls
which are valid for a variety of strategies. Unlike the \ref
MethodIndControl, which can be abstractions with slightly different
implementations from one method to the next, the implementations of
each of the strategy independent controls are consistent for all
strategies that use them. The <tt>\<strategy dependent controls\></tt>
are those controls which are only meaningful for a specific
strategy. Referring to <a href="dakota.input.summary">dakota.input.summary</a>, 
the strategy independent controls are those controls defined
externally from and prior to the strategy selection blocks. They are
all optional. The strategy selection blocks are all required group
specifications separated by logical OR's (\c hybrid OR \c multi_start
OR \c pareto_set OR \c single_method). Thus, one and only one strategy
selection must be provided.  The strategy dependent controls are those
controls defined within the strategy selection blocks. Defaults for
strategy independent and strategy dependent controls are defined in
DataStrategy.  The following sections provide additional detail on the
strategy independent controls followed by the strategy selections and
their corresponding strategy dependent controls.


\section StratIndControl Strategy Independent Controls


The strategy independent controls include \c graphics, \c
tabular_graphics_data, \c tabular_graphics_file, \c iterator_servers,
\c iterator_self_scheduling, and \c iterator_static_scheduling.  The
\c graphics flag activates a 2D graphics window containing history
plots for the variables and response functions in the study.  This
window is updated in an event loop with approximately a 2 second cycle
time.  For applications utilizing approximations over 2 variables, a
3D graphics window containing a surface plot of the approximation will
also be activated.  The \c tabular_graphics_data flag activates file
tabulation of the same variables and response function history data
that gets passed to graphics windows with use of the \c graphics flag.
The \c tabular_graphics_file specification optionally specifies a name
to use for this file (\c dakota_tabular.dat is the default).  Within
the file, the variables and response functions appear as columns and
each function evaluation provides a new table row.  This capability is
most useful for post-processing of DAKOTA results with 3rd party
graphics tools such as MATLAB, Tecplot, etc.  There is no dependence
between the \c graphics flag and the \c tabular_graphics_data flag;
they may be used independently or concurrently.  The \c
iterator_servers, \c iterator_self_scheduling, and \c
iterator_static_scheduling specifications provide manual overrides for
the number of concurrent iterator partitions and the scheduling policy
for concurrent iterator jobs.  These settings are normally determined
automatically in the parallel configuration routines (see
ParallelLibrary) but can be overridden with user inputs if
desired. The \c graphics, \c tabular_graphics_data, and \c
tabular_graphics_file specifications are valid for all strategies.
However, the \c iterator_servers, \c iterator_self_scheduling, and \c
iterator_static_scheduling overrides are only useful inputs for those
strategies supporting concurrency in iterators, i.e., \c multi_start 
and \c pareto_set.  \ref T4d1 "Table 4.1" summarizes the strategy 
independent controls.

\anchor T4d1
<table>
<caption align = "top">
\htmlonly
Table 4.1
\endhtmlonly
Specification detail for strategy independent controls
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>%Graphics flag
<td>\c graphics
<td>none
<td>Optional
<td>no graphics
<tr>
<td>Tabulation of graphics data
<td>\c tabular_graphics_data
<td>none
<td>Optional group
<td>no data tabulation
<tr>
<td>File name for tabular graphics data
<td>\c tabular_graphics_file
<td>string
<td>Optional
<td>\c dakota_tabular.dat
<tr>
<td>Number of iterator servers
<td>\c iterator_servers
<td>integer
<td>Optional
<td>no override of auto configure
<tr>
<td>Self-scheduling of iterator jobs
<td>\c iterator_self_scheduling
<td>none
<td>Optional
<td>no override of auto configure
<tr>
<td>Static scheduling of iterator jobs
<td>\c iterator_static_scheduling
<td>none
<td>Optional
<td>no override of auto configure
</table>


\section StratHybrid Hybrid Minimization Commands


The hybrid minimization strategy has \c sequential,\c embedded, and 
\c collaborative approaches (see the Users
Manual [\ref UsersMan "Adams et al., 2010"] for more information on
the algorithms employed).  In the sequential approach, the best
solutions are transferred from one method to the next through a
specified sequence.  In the embedded approach, a tightly-coupled
hybrid is employed in which a subordinate local method provides
periodic refinements to a top-level global method.  And in the
collaborative approach, multiple methods work together and share
solutions while executing concurrently.

In the \c sequential approach, a list of method strings supplied
with the \c method_list specification specifies the identity and
sequence of iterators to be used. Any number of iterators may be
specified. In the sequential approach, method switching
is managed through the separate convergence controls of each
method.  The number of solutions transferred between methods is specified 
by the particular method through its \c final_solutions method 
control.  For example, if one sets up a two-level
strategy with a first method that generates multiple solutions such as
a genetic algorithm, followed by a second method that is initialized
only at a single point such as a gradient-based algorithm, it is
possible to take the multiple solutions generated by the first method
and create several instances of the second method, each one with a
different initial starting point. The logic governing the transfer of
multiple solutions between methods is as follows: if one solution is
returned from method A, then one solution is transferred to method B.
If multiple solutions are returned from method A, and method B can
accept multiple solutions as input (for example, as a genetic
algorithm population), then one instance of method B is initialized
with multiple solutions.  If multiple solutions are returned from
method A but method B only can accept one initial starting point, then
method B is run several times, each one with a separate starting point from 
the results of method A. \ref T4d2 "Table 4.2" summarizes the sequential hybrid
strategy inputs.

\anchor T4d2
<table>
<caption align = "top">
\htmlonly
Table 4.2
\endhtmlonly
Specification detail for sequential hybrid strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Hybrid strategy
<td>\c hybrid
<td>none
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Sequential hybrid
<td>\c sequential
<td>none
<td>Required group (1 of 3 selections)
<td>N/A
<tr>
<td>%List of methods
<td>\c method_list
<td>list of strings
<td>Required
<td>N/A
</table>

In the \c embedded approach, global and local method strings supplied
with the \c global_method_pointer and \c local_method_pointer
specifications identify the two methods to be used. The \c
local_search_probability setting is an optional specification for
supplying the probability (between 0.0 and 1.0) of employing local
search to improve estimates within the global search. \ref T4d3 "Table 4.3" 
summarizes the embedded hybrid strategy inputs.

\anchor T4d3
<table>
<caption align = "top">
\htmlonly
Table 4.3
\endhtmlonly
Specification detail for embedded hybrid strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Hybrid strategy
<td>\c hybrid
<td>none
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Embedded hybrid
<td>\c embedded
<td>none
<td>Required group (1 of 3 selections)
<td>N/A
<tr>
<td>Pointer to the global method specification
<td>\c global_method_pointer
<td>string
<td>Required
<td>N/A
<tr>
<td>Pointer to the local method specification
<td>\c local_method_pointer
<td>string
<td>Required
<td>N/A
<tr>
<td>Probability of executing local searches
<td>\c local_search_probability
<td>real
<td>Optional
<td>0.1
</table>

In the \c collaborative approach, a list of method strings supplied
with the \c method_list specification specifies the pool of iterators
to be used. Any number of iterators may be specified. The method
collaboration logic follows that of either the Agent-Based
Optimization or HOPSPACK codes and is currently under development.
\ref T4d4 "Table 4.4" summarizes the collaborative hybrid strategy
inputs.

\anchor T4d4
<table>
<caption align = "top">
\htmlonly
Table 4.4
\endhtmlonly
Specification detail for collaborative hybrid strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Hybrid strategy
<td>\c hybrid
<td>none
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Collaborative hybrid
<td>\c collaborative
<td>none
<td>Required group (1 of 3 selections)
<td>N/A
<tr>
<td>%List of methods
<td>\c method_list
<td>list of strings
<td>Required
<td>N/A
</table>


\section StratMultiStart Multistart Iteration Commands


The \c multi_start strategy must specify an iterator using \c
method_pointer.  This iterator is responsible for completing a series
of iterative analyses from a set of different starting points.  These
starting points can be specified as follows: (1) using \c
random_starts, for which the specified number of starting points are
selected randomly within the variable bounds, (2) using \c
starting_points, in which the starting values are provided in a list,
or (3) using both \c random_starts and \c starting_points, for which
the combined set of points will be used.  In aggregate, at least one
starting point must be specified.  The most common example of a
multi-start strategy is multi-start optimization, in which a series of
optimizations are performed from different starting values for the
design variables.  This can be an effective approach for problems with
multiple minima.  \ref T4d5 "Table 4.5" summarizes the multi-start 
strategy inputs.

\anchor T4d5
<table>
<caption align = "top">
\htmlonly
Table 4.5
\endhtmlonly
Specification detail for multi-start strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Multi-start iteration strategy
<td>\c multi_start
<td>none
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Method pointer
<td>\c method_pointer
<td>string
<td>Required
<td>N/A
<tr>
<td>Number of random starting points
<td>\c random_starts
<td>integer
<td>Optional group
<td>no random starting points
<tr>
<td>Seed for random starting points
<td>\c seed
<td>integer
<td>Optional
<td>system-generated seed
<tr>
<td>%List of user-specified starting points
<td>\c starting_points
<td>list of reals
<td>Optional
<td>no user-specified starting points
</table>


\section StratParetoSet Pareto Set Optimization Commands


The \c pareto_set strategy must specify an optimization or least
squares calibration method using \c method_pointer.  This minimizer is
responsible for computing a set of optimal solutions from a set of
response weightings (multi-objective weights or least squares term
weights).  These weightings can be specified as follows: (1) using \c
random_weight_sets, in which case weightings are selected randomly
within [0,1] bounds, (2) using \c weight_sets, in which the weighting
sets are specified in a list, or (3) using both \c random_weight_sets
and \c weight_sets, for which the combined set of weights will be
used.  In aggregate, at least one set of weights must be specified.
The set of optimal solutions is called the "pareto set," which can
provide valuable design trade-off information when there are competing
objectives.  \ref T4d6 "Table 4.6" summarizes the pareto set strategy
inputs.

\anchor T4d6
<table>
<caption align = "top">
\htmlonly
Table 4.6
\endhtmlonly
Specification detail for pareto set strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Pareto set optimization strategy
<td>\c pareto_set
<td>none
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Optimization method pointer
<td>\c method_pointer
<td>string
<td>Required
<td>N/A
<tr>
<td>Number of random weighting sets
<td>\c random_weight_sets
<td>integer
<td>Optional
<td>no random weighting sets
<tr>
<td>Seed for random weighting sets
<td>\c seed
<td>integer
<td>Optional
<td>system-generated seed
<tr>
<td>%List of user-specified weighting sets
<td>\c weight_sets
<td>list of reals
<td>Optional
<td>no user-specified weighting sets
</table>


\section StratSingle Single Method Commands


The single method strategy is the default if no strategy
specification is included in a user input file.  It may also be
specified using the \c single_method keyword within a strategy
specification.  An optional \c method_pointer specification may be
used to point to a particular method specification.  If \c
method_pointer is not used, then the last method specification parsed
will be used as the iterator. \ref T4d7 "Table 4.7" summarizes the 
single method strategy inputs.

\anchor T4d7
<table>
<caption align = "top">
\htmlonly
Table 4.7
\endhtmlonly
Specification detail for single method strategies
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Single method strategy
<td>\c single_method
<td>string
<td>Required group (1 of 4 selections)
<td>N/A
<tr>
<td>Method pointer
<td>\c method_pointer
<td>string
<td>Optional
<td>use of last method parsed
</table>

\htmlonly
<hr>
<br><b><a href="IntroCommands.html#IntroCommands">Previous chapter</a></b>
<br>
<br><b><a href="MethodCommands.html#MethodCommands">Next chapter</a></b>
\endhtmlonly

*/

} // namespace Dakota

