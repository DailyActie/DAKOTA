namespace Dakota {

/** \page EnvCommands Environment Commands

\htmlonly
<b>Environment Commands Table of Contents</b>
<ul>
<li> <a href="EnvCommands.html#EnvDescr">Environment Description</a>
<li> <a href="EnvCommands.html#EnvSpec">Environment Specification</a>
<li> <a href="EnvCommands.html#EnvOutput">Environment Output Controls</a>
<li> <a href="EnvCommands.html#EnvMethPtr">Environment Method Pointer Control</a>
</ul>
\endhtmlonly


\section EnvDescr Environment Description


The environment section in a %Dakota input file specifies the top level
technique which will govern the management of iterators and models in
the solution of the problem of interest.

Each of the environment specifications identifies one or more method
pointers (e.g., \c method_list, \c method_pointer) to identify the
iterators that will be used in the environment.  These method pointers
are strings that correspond to the \c id_method identifier strings
from the method specifications (see \ref MethodIndControl). These
string identifiers (e.g., 'NLP1') should \e not be confused with
method selections (e.g., \c dot_mmfd).  Each of the method
specifications identified in this manner has the responsibility for
identifying corresponding model specifications (using \c model_pointer
from \ref MethodIndControl), which in turn identify the variables,
interface, and responses specifications (using \c variables_pointer,
\c interface_pointer, and \c responses_pointer from \ref
ModelCommands) that are used to build the model used by the iterator.
If one of these specifications does not provide an optional pointer,
then that component will be constructed using the last specification
parsed.  In addition to method pointers, a variety of graphics options
(e.g., \c tabular_graphics_data), iterator concurrency controls (e.g.,
\c iterator_servers), and strategy data (e.g., \c starting_points) can
be specified.

Specification of a environment block in an input file is optional, with
\c single_method being the default environment.  If no environment is
specified or if \c single_method is specified without its optional \c
method_pointer specification, then the default behavior is to employ
the last method, variables, interface, and responses specifications
parsed. This default behavior is most appropriate if only one
specification is present for method, variables, interface, and
responses, since there is no ambiguity in this case.


\section EnvSpec Environment Specification


The environment specification has the following structure:
\verbatim
environment,
	<output controls>
	<top method pointer>
\endverbatim

The <tt>\<environment independent controls\></tt> are those controls
which are valid for a variety of strategies. Unlike the \ref
MethodIndControl, which can be abstractions with slightly different
implementations from one method to the next, the implementations of
each of the environment independent controls are consistent for all
strategies that use them. The <tt>\<environment dependent
controls\></tt> are those controls which are only meaningful for a
specific environment. Referring to dakota.input.summary, the
environment independent controls are those controls defined externally
from and prior to the environment selection blocks. They are all
optional. The following sections provide additional detail on the
environment independent controls followed by the environment selections and
their corresponding environment dependent controls.


\section EnvOutput Environment Output Controls


The environment independent controls are summarized in \ref T4d1 
"Table 4.1", including graphics, output data, and iterator scheduling
controls.  The \c graphics flag activates a 2D graphics window
containing history plots for the variables and response functions in
the study.  This window is updated in an event loop with approximately
a 2 second cycle time.  The \c tabular_graphics_data flag activates
file tabulation of the same variables and response function history
data that gets passed to graphics windows with use of the \c graphics
flag.  The \c tabular_graphics_file specification optionally specifies
a name to use for this file (\c dakota_tabular.dat is the default).
Within the file, the variables and response functions appear as
columns and each function evaluation provides a new table row.  This
capability is most useful for post-processing of %Dakota results with
third-party graphics tools such as MATLAB, Tecplot, etc.  There is no
dependence between the \c graphics flag and the \c
tabular_graphics_data flag; they may be used independently or
concurrently.  Numeric output precision (as passed to the C++ control
std::setprecision) can be controlled with \c output_precision with an
upper limit of 16 enforced at run-time.  When this control is not
specified, most %Dakota output will default to a precision of 10,
though filesystem interfaces and pre-run output use higher precision
for accuracy and better results reproducibility.

Experimental capability: Final results from a %Dakota study can be
output to dakota_results.txt by specifying \c results_output
(optionally specifying an alternate file name with \c
results_output_filename).  The current experimental text file format
is hierarchical and a precursor to planned output to structured text
formats such as XML or YAML and binary formats such as HDF5.  The
contents, organization, and format of results files are all under
active development and are subject to change.

The \c graphics, \c tabular_graphics_data, and \c
tabular_graphics_file specifications are valid for all strategies.

\anchor T4d1
<table>
<caption align = "top">
\htmlonly
Table 4.1
\endhtmlonly
Specification detail for output controls
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>%Graphics flag
<td>\c graphics
<td>none
<td>Optional
<td>no graphics
<tr>
<td>Tabulation of graphics data
<td>\c tabular_graphics_data
<td>none
<td>Optional group
<td>no data tabulation
<tr>
<td>File name for tabular graphics data
<td>\c tabular_graphics_file
<td>string
<td>Optional
<td>\c dakota_tabular.dat
<tr>
<td>Numeric output precision
<td>\c output_precision
<td>integer
<td>Optional
<td>10 (for most output)
<tr>
<td>Enable results output
<td>\c results_output
<td>none
<td>Optional
<td>no output DB
<tr>
<td>File name for results output
<td>\c results_output_file
<td>string
<td>Optional
<td>\c dakota_results.txt
</table>


\section EnvMethPtr Environment Method Pointer Control


An optional \c method_pointer specification may be
used to point to a particular method specification.  If \c
method_pointer is not used, then the last method specification parsed
will be used as the iterator. \ref T4d7 "Table 4.7" summarizes the 
method identification inputs.

\anchor T4d7
<table>
<caption align = "top">
\htmlonly
Table 4.7
\endhtmlonly
Specification detail for top method pointer
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Method pointer
<td>\c method_pointer
<td>string
<td>Optional
<td>use of last method parsed
</table>

\htmlonly
<hr>
<br><b><a href="IntroCommands.html#IntroCommands">Previous chapter</a></b>
<br>
<br><b><a href="MethodCommands.html#MethodCommands">Next chapter</a></b>
\endhtmlonly

*/

} // namespace Dakota
