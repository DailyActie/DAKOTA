Blurb::
Local Surrogate Based Optimization
Description::
In surrogate-based optimization (SBO) and surrogate-based nonlinear
least squares (SBNLS), minimization occurs using a set of one or more
approximations, defined from a surrogate model, that are built and
periodically updated using data from a "truth" model. The surrogate
model can be a global data fit (e.g., regression or interpolation of
data generated from a design of computer experiments), a multipoint
approximation, a local Taylor Series expansion, or a model hierarchy
approximation (e.g., a low-fidelity simulation model), whereas the
truth model involves a high-fidelity simulation model.  The goals of
surrogate-based methods are to reduce the total number of truth model
simulations and, in the case of global data fit surrogates, to smooth
noisy data with an easily navigated analytic function.

In the surrogate-based local (SBL) method, a trust region approach is
used to manage the minimization process to maintain acceptable
accuracy between the surrogate model and the truth model (by limiting
the range over which the surrogate model is trusted). The process
involves a sequence of minimizations performed on the surrogate model
and bounded by the trust region. At the end of each approximate
minimization, the candidate optimum point is validated using the truth
model. If sufficient decrease has been obtained in the truth model,
the trust region is re-centered around the candidate optimum point and
the trust region will either shrink, expand, or remain the same size
depending on the accuracy with which the surrogate model predicted the
truth model decrease. If sufficient decrease has not been attained,
the trust region center is not updated and the entire trust region
shrinks by a user-specified factor. The cycle then repeats with the
construction of a new surrogate model, a minimization, and another
test for sufficient decrease in the truth model. This cycle continues
until convergence is attained.

The \c surrogate_based_local method must specify an optimization or
least squares sub-method either by pointer using \c
approx_method_pointer (e.g., 'NLP1') or by name using \c
approx_method_name (e.g., 'npsol_sqp').  The former identifies a full
sub-method specification for the sub-problem minimizer (which allows
non-default minimizer settings), whereas the latter supports a
streamlined specification (that employs default minimizer settings).
For both cases, the \c surrogate_based_local method specification is
responsible for using its \c model_pointer (see \ref MethodIndControl)
to select a \c surrogate model (see \ref ModelSurrogate).  Any \c
model_pointer identified in an approximate sub-method specification
is ignored.

In addition to the method independent controls for \c max_iterations
and \c convergence_tolerance described in Table \ref T5d1 "5.1", SBL
algorithm controls include \c soft_convergence_limit (a soft
convergence control for the SBL iterations which limits the number of
consecutive iterations with improvement less than the convergence
tolerance) and \c truth_surrogate_bypass (a flag for bypassing all
lower level surrogates when performing truth verifications on a top
level surrogate).

The \c trust_region optional group specification can be used to
specify the initial size of the trust region (using \c initial_size)
relative to the total variable bounds, the minimum size of the trust
region (using \c minimum_size), the contraction factor for the trust
region size (using \c contraction_factor) used when the surrogate
model is performing poorly, and the expansion factor for the trust
region size (using \c expansion_factor) used when the the surrogate
model is performing well. Two additional commands are the trust region
size contraction threshold (using \c contract_threshold) and the trust
region size expansion threshold (using \c expand_threshold).  These
two commands are related to what is called the trust region ratio,
which is the actual decrease in the truth model divided by the
predicted decrease in the truth model in the current trust region. The
command \c contract_threshold sets the minimum acceptable value for
the trust region ratio, i.e., values below this threshold cause the
trust region to shrink for the next SBL iteration. The command \c
expand_threshold determines the trust region value above which the
trust region will expand for the next SBL iteration.

For SBL problems with nonlinear constraints, a number of algorithm
formulations exist as described in 
[\ref Eldred2006a "Eldred and Dunlavy, 2006"] and as summarized in the
Advanced Examples section of the Models chapter of the Users Manual 
[\ref UsersMan "Adams et al., 2010"].
First, the "primary" functions (that is, the objective functions or
calibration terms) in the approximate subproblem can be selected to
be surrogates of the original primary functions (\c original_primary),
a single objective function (\c single_objective) formed from the
primary function surrogates, or either an augmented Lagrangian merit
function (\c augmented_lagrangian_objective) or a Lagrangian merit
function (\c lagrangian_objective) formed from the primary and
secondary function surrogates.  The former option may imply the use of
a nonlinear least squares method, a multiobjective optimization
method, or a single objective optimization method to solve the
approximate subproblem, depending on the definition of the primary
functions.  The latter three options all imply the use of a single
objective optimization method regardless of primary function
definition.  Second, the surrogate constraints in the approximate
subproblem can be selected to be surrogates of the original
constraints (\c original_constraints) or linearized approximations to
the surrogate constraints (\c linearized_constraints), or constraints
can be omitted from the subproblem (\c no_constraints). Following
optimization of the approximate subproblem, the candidate iterate is
evaluated using a merit function, which can be selected to be a simple
penalty function with penalty ramped by SBL iteration number (\c
penalty_merit), an adaptive penalty function where the penalty ramping
may be accelerated in order to avoid rejecting good iterates which
decrease the constraint violation (\c adaptive_penalty_merit), a
Lagrangian merit function which employs first-order Lagrange
multiplier updates (\c lagrangian_merit), or an augmented Lagrangian
merit function which employs both a penalty parameter and zeroth-order
Lagrange multiplier updates (\c augmented_lagrangian_merit).  When an
augmented Lagrangian is selected for either the subproblem objective
or the merit function (or both), updating of penalties and multipliers
follows the approach described in [\ref Conn2000 "Conn et al., 2000"].
Following calculation of the merit function for the new iterate, the
iterate is accepted or rejected and the trust region size is adjusted
for the next SBL iteration.  Iterate acceptance is governed either by
a trust region ratio (\c tr_ratio) formed from the merit function
values or by a filter method (\c filter); however, trust region
resizing logic is currently based only on the trust region ratio.  For
infeasible iterates, constraint relaxation can be used for balancing
constraint satisfaction and progress made toward an optimum. The
command \c constraint_relax followed by a method name specifies the
type of relaxation to be used. Currently, \c homotopy [\ref Perez2004
"Perez et al., 2004"] is the only available method for constraint
relaxation, and this method is dependent on the presence of the NPSOL
library within the %Dakota executable. 


Topics::	surrogate_based_optimization, not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	method-efficient_global, method-surrogate_based_global
