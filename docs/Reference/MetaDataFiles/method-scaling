Blurb::
Turn on scaling for continuous design variables, responses, and constraints
Description::
Continuous design variable, function, and constraint scaling can be
turned on for optimizers and least squares minimizers by providing the
\c scaling keyword.  Discrete variable scaling is not supported.  When
scaling is enabled, variables, functions, gradients, Hessians, etc.,
are transformed such that the optimizer iterates in scaled variable
space, whereas evaluations of the computational model as specified in
the interface are performed on the original problem scale.  Therefore
using scaling does not require rewriting the interface to the
simulation code. The user may specify no, one, or a vector of scaling
type strings through each of the \c scale_types (see \ref
VarCommands); \c objective_function_scale_types, \c
calibration_term_scale_types, \c nonlinear_inequality_scale_types,
\c nonlinear_equality_scale_types (see \ref RespFn); \c
linear_inequality_scale_types, and \c linear_equality_scale_types
specifications.  Valid options for types
include
 <tt>'none'</tt> (default), <tt>'value'</tt>, <tt>'auto'</tt>, or
<tt>'log'</tt>, for no, characteristic value, automatic, or
logarithmic scaling, respectively, although not all types are valid
for scaling all entities (see the references for details).  If a
single string is specified using any of these keywords it will apply
to each component of the relevant vector, e.g., <tt>scale_types =
'value'</tt> will enable characteristic value scaling for each
continuous design variable. The user may specify no, one, or a vector
of nonzero characteristic scale values through each of the \c
scales (see \ref VarCommands); \c objective_function_scales, \c
calibration_term_scales, \c nonlinear_inequality_scales, \c
nonlinear_equality_scales (see \ref RespFn); \c
linear_inequality_scales, and \c linear_equality_scales
specifications.  These values are ignored for
scaling type <tt>'none'</tt>, required for <tt>'value'</tt>, and
optional for <tt>'auto'</tt> and <tt>'log'</tt>.  If a single value is
specified using any of these keywords it will apply to each component
of the relevant vector, e.g., <tt>scales = 3.0</tt> will apply a
characteristic scaling value of <tt>3.0</tt> to each continuous design
variable.  When the \c scaling keyword is omitted, all \c
*_scale_types and \c *_scales specifications are ignored in the
method, variables, and responses sections.

When scaling is enabled, the following procedures determine the
transformations used to scale each component of a variables or
response vector.  A warning is issued if scaling would result in
division by a value smaller in magnitude than <tt>1.0e10*DBL_MIN</tt>.
User-provided values violating this lower bound are accepted
unaltered, whereas for automatically calculated scaling, the lower
bound is enforced.

<ul> 
<li> None (<tt>'none'</tt>): no scaling performed (\c *_scales ignored)
on this component

<li> Characteristic value (<tt>'value'</tt>): the corresponding
quantity is scaled by the (required) characteristic value provided in
the \c *_scales specification.  If the scale value is negative, the
sense of inequalities are changed accordingly.

<li> Automatic (<tt>'auto'</tt>): First, any characteristic values
from the optional \c *_scales specification are applied.  Then,
automatic scaling will be attempted according to the following scheme:

  <ul> 
  <li> two-sided bounds scaled into the interval [0,1]; 
  <li> one-sided bound or targets are scaled by the characteristic
value, moving the bound or target to 1 and changing the sense of
inequalities where necessary;
  <li> no bounds or targets: no automatic scaling possible, therefore no 
       scaling for this component 
  </ul> 

Automatic scaling is not available for objective functions nor calibration 
terms since they lack bound constraints.  Futher, when automatically
scaled, linear constraints are scaled by characteristic values only, not
affinely scaled into [0,1].  

<li> Logarithmic (<tt>'log'</tt>): First, any characteristic values from the
optional \c *_scales specification are applied.  Then, logarithm base
10 scaling is applied.  Logarithmic scaling is not available for
linear constraints.  Further, when continuous design variables are log
scaled, linear constraints are not allowed.
</ul>

Topics::	not_yet_reviewed, method_independent_controls
Examples::
Theory::
Faq::
See_Also::	
