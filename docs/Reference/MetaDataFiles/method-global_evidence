Blurb::
Evidence theory with evidence measures computed with global optimization methods
Description::
<b> See the topic page \ref topic-evidence_theory for important
background information and usage notes </b>

\c global_evidence allows the user to specify
several global approaches for calculating the belief and plausibility functions: 
\li \c lhs - note: this takes the minimum and maximum of the samples as the bounds per
"interval cell combination." 
\li \c ego
\li \c sbo
\li \c ea



Note that to calculate the plausibility and belief cumulative
distribution functions, one has to look at all combinations of
intervals for the uncertain variables. In terms of implementation, if
one is using LHS sampling as outlined above, this method creates a
large sample over the response surface, then examines each cell to
determine the minimum and maximum sample values within each cell. To
do this, one needs to set the number of samples relatively high: the
default is 10,000 and we recommend at least that number. If the model
you are running is a simulation that is computationally quite
expensive, we recommend that you set up a surrogate model within the
%Dakota input file so that \c global_evidence performs its sampling and
calculations on the surrogate and not on the original model. If one
uses optimization methods instead to find the minimum and maximum
sample values within each cell, this can also be computationally
expensive.

Topics::	problem, not_yet_reviewed
Examples::
Theory::
The basic idea is that one specifies an "evidence structure"
on uncertain inputs and propagates that to obtain belief and
plausibility functions on the response functions. The inputs are
defined by sets of intervals and Basic Probability Assignments (BPAs).
Evidence propagation is computationally expensive, since the minimum
and maximum function value must be calculated for each "interval cell
combination." These bounds are aggregated into belief and
plausibility.
Faq::
See_Also::	method-global_interval_est, method-local_evidence, method-local_interval_est
