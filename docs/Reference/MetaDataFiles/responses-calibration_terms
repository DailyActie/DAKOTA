Blurb::
Response type suitable for calibration or least squares
Description::
A calibration data set is specified using \c calibration_terms and
optional keywords for weighting/scaling, data, and
constraints. Each of the calibration terms is a residual to
be driven toward zero

The keywords \c nonlinear_inequality_constraints, and \c nonlinear_equality_constraints 
specify the number of nonlinear inequality
constraints, and nonlinear equality constraints, respectively. 
When interfacing to external applications, the responses must be returned
to %Dakota in this order: calibration terms, nonlinear_inequality_constraints,
then nonlinear_equality_constraints.

Any linear constraints present in an application need only be input to
an optimizer at start up and do not need to be part of the data
returned on every function evaluation. These are therefore specified in the method block.

The \c primary_scale_types specification includes strings
specifying the scaling type for each residual term in methods that
support scaling, when scaling is enabled (see \ref MethodIndControl
for details). Each entry in \c primary_scale_types may be
selected from <tt>'none'</tt>, <tt>'value'</tt>, or <tt>'log'</tt>, to
select no, characteristic value, or logarithmic scaling, respectively.
Automatic scaling is not available for calibration terms. If a single
string is specified it will apply to each least squares terms. Each
entry in \c calibration_term_scales may be a user-specified nonzero
characteristic value to be used in scaling each term. These values
are ignored for scaling type <tt>'none'</tt>, required for
<tt>'value'</tt>, and optional for <tt>'log'</tt>. If a single real
value is specified it will apply to each term. The \c
weights specification provides a means to specify a
relative emphasis among the vector of squared residuals through
multiplication of these squared residuals by a vector of weights: \f[f
= \sum_{i=1}^{n} w_i R_i^2 = \sum_{i=1}^{n} w_i (y^M_i - y^O_i)^2\f]
If characteristic value scaling is additionally specified, then it is
applied to each residual prior to squaring: \f[f = \sum_{i=1}^{n} w_i
(\frac{y^M_i - y^O_i}{s_i})^2\f] And in the case where experimental
data uncertainties are supplied, then the weights are automatically
defined to be the inverse of the experimental variance: \f[f =
\sum_{i=1}^{n} \frac{1}{\sigma^2_i} (\frac{y^M_i - y^O_i}{s_i})^2\f]


Topics::	not_yet_reviewed
Examples::
Theory::
These types of problems are commonly encountered
in parameter estimation, system identification, and model
calibration. Least squares calibration problems are most efficiently
solved using special-purpose least squares solvers such as
Gauss-Newton or Levenberg-Marquardt; however, they may also be solved
using general-purpose optimization algorithms.

While Dakota can solve these problems with either least squares or
optimization algorithms, the response data sets to be returned from
the simulator are different. Least squares calibration involves a set
of residual
functions whereas optimization involves a single objective function
(sum of the squares of the residuals), i.e., \f[f = \sum_{i=1}^{n}
R_i^2\f] where \e f is the objective function and the set of \f$R_i\f$
are the residual functions. Therefore, function values and derivative
data in the least squares case involve the values and derivatives of
the residual functions, whereas the optimization case involves values
and derivatives of the sum of squares objective function. This means that 
in the least squares calibration case, the user must return each of 
\c n residuals 
separately as a separate calibration term. Switching
between the two approaches sometimes requires different simulation
interfaces capable of returning the different granularity of response
data required, although %Dakota supports automatic recasting of
residuals into a sum of squares for presentation to an optimization
method. Typically, the user must compute the difference between the 
model results and the observations when computing the residuals. 
However, the user has the option of specifying the observational data 
(e.g. from physical experiments or other sources) in a file. 
Faq::
See_Also::	responses-objective_functions, responses-response_functions
