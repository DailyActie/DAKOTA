Blurb::
Group to specify nonlinear inequality constraints
Description::
The \c lower_bounds and \c upper_bounds 
specifications provide the lower and
upper bounds for 2-sided nonlinear inequalities of the form
\f[g_l \leq g(x) \leq g_u\f]
The defaults for the inequality constraint bounds are selected so that 
one-sided inequalities of the form
\f[g(x) \leq 0.0\f]
result when there are no user constraint bounds specifications (this
provides backwards compatibility with previous %Dakota versions). In a
user bounds specification, any upper bound values greater than \c
+bigRealBoundSize (1.e+30, as defined in Minimizer)
are treated as +infinity and any lower bound values less than \c 
-bigRealBoundSize are treated as -infinity. This feature is commonly 
used to drop one of the bounds in order to specify a 1-sided constraint 
(just as the default lower bounds drop out since \c -DBL_MAX < \c 
-bigRealBoundSize). The same approach is used for nonexistent linear 
inequality bounds as described in \ref MethodIndControl and for 
nonexistent design variable bounds as described in \ref VarDV.

The \c scale_types
specifications include strings
specifying the scaling type for each nonlinear inequality or equality
constraint, respectively, in methods that support scaling, when scaling
is enabled (see \ref MethodIndControl for details). Each entry in \c
scale_types may be selected from <tt>'none'</tt>,
<tt>'value'</tt>, <tt>'auto'</tt>, or <tt>'log'</tt>, to select no,
characteristic value, automatic, or logarithmic scaling, respectively.
If a single string is specified it will apply to all components of the
relevant nonlinear constraint vector. Each entry in \c scales may be a
user-specified nonzero characteristic value to be used in scaling each
constraint component. These values are ignored for scaling type
<tt>'none'</tt>, required for <tt>'value'</tt>, and optional for
<tt>'auto'</tt> and <tt>'log'</tt>. If a single real value is
specified it will apply to each constraint.

Topics::	not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	
