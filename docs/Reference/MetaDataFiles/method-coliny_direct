Blurb::
DIviding RECTangles  method
Description::
North Carolina State University (NCSU) has an implementation of the
DIRECT algorithm (DIviding RECTangles algorithm that is outlined in
the SCOLIB method section above).  This version is documented in [\ref
Gablonsky2001 "Gablonsky, 2001".]  We have found that the NCSU DIRECT
implementation works better and is more robust for some problems than
\c coliny_direct.  Currently, we maintain both versions of DIRECT in
%Dakota; in the future, we may deprecate one.  


SCOLIB (formerly known as COLINY) is a collection of nongradient-based
optimizers that support the Common Optimization Library INterface
(COLIN).  SCOLIB optimizers currently include \c coliny_cobyla, \c
coliny_direct, \c coliny_ea, \c coliny_pattern_search and \c
coliny_solis_wets.  (Yes, the input spec still has "coliny" prepended
to the method name.)  Additional SCOLIB information is available from
https://software.sandia.gov/trac/acro.

SCOLIB solvers now support bound constraints and general nonlinear
constraints.  Supported nonlinear constraints include both equality
and two-sided inequality constraints.  SCOLIB solvers do not yet
support linear constraints.  Most SCOLIB optimizers treat constraints
with a simple penalty scheme that adds \c constraint_penalty times the
sum of squares of the constraint violations to the objective function.
Specific exceptions to this method for handling constraint violations
are noted below.  (The default value of \c constraint_penalty is
1000.0, except for methods that dynamically adapt their constraint
penalty, for which the default value is 1.0.)

The method independent controls for \c max_iterations and \c
max_function_evaluations limit the number of major iterations and the
number of function evaluations that can be performed during a SCOLIB
optimization, respectively. The \c convergence_tolerance control
defines the threshold value on relative change in the objective
function that indicates convergence. The \c output verbosity
specification controls the amount of information generated by SCOLIB:
the \c silent, \c quiet, and \c normal settings correspond to minimal
reporting from SCOLIB, whereas the \c verbose setting corresponds to a
higher level of information, and \c debug outputs method
initialization and a variety of internal SCOLIB diagnostics.  The
majority of SCOLIB's methods perform independent function evaluations
that can directly take advantage of %Dakota's parallel
capabilities. Only \c coliny_solis_wets, \c coliny_cobyla, and certain
configurations of \c coliny_pattern_search are inherently serial (see
\ref MethodSCOLIBPS). The parallel methods automatically utilize
parallel logic when the %Dakota configuration supports
parallelism. Lastly, neither \c speculative gradients nor linear
constraints are currently supported with SCOLIB.  Specification detail
for method independent controls is provided in Tables \ref T5d1 "5.1"
through \ref T5d3 "5.3".

Some SCOLIB methods exploit parallelism through the use of %Dakota's
concurrent function evaluations.  The nature of the algorithms,
however, limits the amount of concurrency that can be exploited.  The
maximum amount of evaluation concurrency that can be leveraged by the
various methods is as follows:

\li COBYLA: one
\li DIRECT: twice the number of variables
\li Evolutionary Algorithms: size of the population
\li Pattern Search: size of the search pattern
\li Solis-Wets: one
All SCOLIB methods support the \c show_misc_options optional
specification which results in a dump of all the allowable method
inputs.  Note that the information provided by this command refers to
optimizer parameters that are internal to SCOLIB, and which may differ
from corresponding parameters used by the %Dakota interface.  The \c
misc_options optional specification provides a means for inputing
additional settings supported by the SCOLIB methods but which are not
currently mapped through the %Dakota input specification. Care must be
taken in using this specification; they should only be employed by
users familiar with the full range of parameter specifications
available directly from SCOLIB and understand any differences that
exist between those specifications and the ones available through
%Dakota.

Each of the SCOLIB methods supports the \c solution_target control,
which defines a convergence criterion in which the optimizer will
terminate if it finds an objective function value lower than the
specified target. 

The DIviding RECTangles (DIRECT) optimization algorithm is a
derivative free global optimization method that balances local search
in promising regions of the design space with global search in
unexplored regions.  As shown in Figure 5.1, DIRECT adaptively
subdivides the space of feasible design points so as to guarantee that
iterates are generated in the neighborhood of a global minimum in
finitely many iterations.

\image html  direct1.jpg "Figure 5.1 Design space partitioning with DIRECT"
\image latex direct1.eps "Design space partitioning with DIRECT" width=10cm

In practice, DIRECT has proven an effective heuristic for engineering
design applications, for which it is able to quickly identify
candidate solutions that can be further refined with fast local
optimizers.

DIRECT uses the \c solution_target, \c constraint_penalty and
\c show_misc_options specifications that are described in
\ref MethodSCOLIBDC.  Note, however, that DIRECT uses a fixed
penalty value for constraint violations (i.e. it is not dynamically
adapted as is done in \c coliny_pattern_search).

The \c division specification determines how DIRECT subdivides 
each subregion of the search space.  If \c division is set to 
\c major_dimension, then the dimension representing the longest edge
of the subregion is subdivided (this is the default).  If \c division
is set to \c all_dimensions, then all dimensions are simultaneously 
subdivided.

Each subregion considered by DIRECT has a \b size, which corresponds to
the longest diagonal of the subregion.  The \c global_balance_parameter
controls how much global search is performed by only allowing a
subregion to be subdivided if the size of the subregion divided by the
size of the largest subregion is at least \c global_balance_parameter.
Intuitively, this forces large subregions to be subdivided before the
smallest subregions are refined.  The \c local_balance_parameter provides
a tolerance for estimating whether the smallest subregion can provide
a sufficient decrease to be worth subdividing;  the default value is a
small value that is suitable for most applications.

DIRECT can be terminated with the standard \c max_function_evaluations
and \c solution_target specifications.  Additionally, the \c
max_boxsize_limit specification terminates DIRECT if the size of the
largest subregion falls below this threshold, and the \c min_boxsize_limit
specification terminates DIRECT if the size of the smallest subregion
falls below this threshold.  In practice, this latter specification is
likely to be more effective at limiting DIRECT's search.




Topics::	package_scolib, package_coliny, direct, not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	method-coliny_beta, method-coliny_pattern_search, method-coliny_cobyla, method-coliny_ea, method-coliny_solis_wets, method-ncsu_direct
