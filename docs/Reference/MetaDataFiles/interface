Blurb::
Specifies how function evaluations will be performed in order to map a set of parameters into a set of responses.
Description::
The interface section in a Dakota input file specifies how function evaluations will be performed in order to map a set of parameters into a set of responses. Function evaluations are performed using either algebraic mappings, interfaces to simulation codes, or a combination of the two.

When employing algebraic mappings, the AMPL solver library [Gay, 1997] is used to evaluate a directed acyclic graph (DAG) specification from a separate stub.nl file. Separate stub.col and stub.row files are also required to declare the string identifiers of the subset of inputs and outputs, respectively, that will be used in the algebraic mappings.

When employing mappings with simulation codes, the simulations may be available internally or externally to Dakota. The interface invokes the simulation using either system calls, forks, direct function invocations, or computational grid invocations. In the system call and fork cases, the simulation is external to Dakota and communication between Dakota and the simulation occurs through parameter and response files. In the direct function case, the simulation is internal to Dakota and communication occurs through the function parameter list. The direct case can involve linked simulation codes or test functions which are compiled into the Dakota executable. The test functions allow for rapid testing of algorithms without process creation overhead or engineering simulation expense. The grid case is experimental and under development, but is intended to support simulations which are external to Dakota and geographically distributed.
Topics:: block, not_yet_reviewed
Examples::
The interface specification has the following top-level structure:
\verbatim
interface,
	<interface independent controls>
	<algebraic mappings specification>
	<simulation interface selection>
	  <simulation interface dependent controls>
\endverbatim


Theory::
Faq::
See_Also::	
