Blurb::
What does this do???????????????
Description::
The method independent controls for \c max_iterations and \c
max_function_evaluations limit the number of major iterations and the
number of function evaluations that can be performed during a SCOLIB
optimization, respectively. The \c convergence_tolerance control
defines the threshold value on relative change in the objective
function that indicates convergence. The \c output verbosity
specification controls the amount of information generated by SCOLIB:
the \c silent, \c quiet, and \c normal settings correspond to minimal
reporting from SCOLIB, whereas the \c verbose setting corresponds to a
higher level of information, and \c debug outputs method
initialization and a variety of internal SCOLIB diagnostics. The
majority of SCOLIB's methods perform independent function evaluations
that can directly take advantage of %Dakota's parallel
capabilities. Only \c coliny_solis_wets, \c coliny_cobyla, and certain
configurations of \c coliny_pattern_search are inherently serial (see
\ref MethodSCOLIBPS). The parallel methods automatically utilize
parallel logic when the %Dakota configuration supports
parallelism. Lastly, neither \c speculative gradients nor linear
constraints are currently supported with SCOLIB. Specification detail
for method independent controls is provided in Tables \ref T5d1 "5.1"
through \ref T5d3 "5.3".

Some SCOLIB methods exploit parallelism through the use of %Dakota's
concurrent function evaluations. The nature of the algorithms,
however, limits the amount of concurrency that can be exploited. The
maximum amount of evaluation concurrency that can be leveraged by the
various methods is as follows:

\li COBYLA: one
\li DIRECT: twice the number of variables
\li Evolutionary Algorithms: size of the population
\li Pattern Search: size of the search pattern
\li Solis-Wets: one

All SCOLIB methods support the \c show_misc_options optional
specification which results in a dump of all the allowable method
inputs. Note that the information provided by this command refers to
optimizer parameters that are internal to SCOLIB, and which may differ
from corresponding parameters used by the %Dakota interface. The \c
misc_options optional specification provides a means for inputing
additional settings supported by the SCOLIB methods but which are not
currently mapped through the %Dakota input specification. Care must be
taken in using this specification; they should only be employed by
users familiar with the full range of parameter specifications
available directly from SCOLIB and understand any differences that
exist between those specifications and the ones available through
%Dakota.

Each of the SCOLIB methods supports the \c solution_target control,
which defines a convergence criterion in which the optimizer will
terminate if it finds an objective function value lower than the
specified target. 

!!!!!! NOT ACTUALLY MENTIONED AT ALL IN THE REFMAN??!?!?!

Topics::	package_scolib, package_coliny, problem, not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	method-coliny_direct, method-coliny_pattern_search, method-coliny_cobyla, method-coliny_ea, method-coliny_solis_wets
