Blurb::
Newton method based optimization
Description::
The method independent controls for \c max_iterations and \c
max_function_evaluations limit the number of major iterations and the
number of function evaluations that can be performed during an OPT++
optimization. The \c convergence_tolerance control defines the
threshold value on relative change in the objective function that
indicates convergence. The \c output verbosity specification controls
the amount of information generated from OPT++ executions: the \c debug
setting turns on OPT++'s internal debug mode and also generates
additional debugging information from %Dakota's SNLLOptimizer wrapper
class. OPT++'s gradient-based methods are not parallel algorithms and
cannot directly take advantage of concurrent function
evaluations. However, if \c numerical_gradients with \c method_source
\c dakota is specified, a parallel %Dakota configuration can utilize
concurrent evaluations for the finite difference gradient
computations. OPT++'s nongradient-based PDS method can directly
exploit asynchronous evaluations; however, this capability has not yet
been implemented in the SNLLOptimizer class.

The \c speculative specification enables speculative computation of
gradient and/or Hessian information, where applicable, for parallel
optimization studies.  By speculating that the derivative information
at the current point will be used later, the complete data set (all
available gradient/Hessian information) can be computed on every
function evaluation.  While some of these computations will be wasted,
the positive effects are a consistent parallel load balance and
usually shorter wall clock time.  The \c speculative specification is
applicable only when parallelism in the gradient calculations can be
exploited by %Dakota (it will be ignored for \c vendor \c numerical
gradients).

Lastly, linear constraint specifications are supported by each of the
Newton methods (\c optpp_newton, \c optpp_q_newton, \c optpp_fd_newton,
and \c optpp_g_newton); whereas \c optpp_cg must be unconstrained and
\c optpp_pds can be, at most, bound-constrained. 

OPT++'s method dependent controls are \c max_step, \c
gradient_tolerance, \c search_method, \c merit_function, \c
steplength_to_boundary, \c centering_parameter, and \c
search_scheme_size. The \c max_step control specifies the maximum step
that can be taken when computing a change in the current design point
(e.g., limiting the Newton step computed from current gradient and
Hessian information). It is equivalent to a move limit or a maximum
trust region size. The \c gradient_tolerance control defines the
threshold value on the L2 norm of the objective function gradient that
indicates convergence to an unconstrained minimum (no active
constraints). The \c gradient_tolerance control is defined for all
gradient-based optimizers.

\c max_step and \c gradient_tolerance are the only method dependent
controls for the OPT++ conjugate gradient method. 

The \c search_method control is defined for all Newton-based
optimizers and is used to select between \c trust_region, \c
gradient_based_line_search, and \c value_based_line_search methods.
The \c gradient_based_line_search option uses the line search method
proposed by [\ref More1994 "More and Thuente, 1994"].  This option
satisfies sufficient decrease and curvature conditions; whereas, \c
value_base_line_search only satisfies the sufficient decrease
condition.  At each line search iteration, the \c
gradient_based_line_search method computes the function and gradient
at the trial point.  Consequently, given expensive function
evaluations, the \c value_based_line_search method is preferred to the
\c gradient_based_line_search method. Each of these Newton methods
additionally supports the \c tr_pds selection for unconstrained
problems.  This option performs a robust trust region search using
pattern search techniques.  Use of a line search is the default for
bound-constrained and generally-constrained problems, and use of a \c
trust_region search method is the default for unconstrained problems.

The \c merit_function, \c steplength_to_boundary, and \c
centering_parameter selections are additional specifications that are
defined for the solution of generally-constrained problems with
nonlinear interior-point algorithms.  A \c merit_function is a
function in constrained optimization that attempts to provide joint
progress toward reducing the objective function and satisfying the
constraints.  Valid options are \c el_bakry, \c argaez_tapia, or \c
van_shanno, where user input is not case sensitive in this case.
Details for these selections are as follows:

\li The "el_bakry" merit function is the L2-norm of the first order
optimality conditions for the nonlinear programming problem.  The cost
per linesearch iteration is n+1 function evaluations.  For more
information, see [\ref ElBak1996 "El-Bakry et al., 1996"].
  
\li The "argaez_tapia" merit function can be classified as a modified
augmented Lagrangian function.  The augmented Lagrangian is modified
by adding to its penalty term a potential reduction function to handle
the perturbed complementarity condition.  The cost per linesearch
iteration is one function evaluation.  For more information, see
[\ref Tapia1 "Tapia and Argaez"].

\li The "van_shanno" merit function can be classified as a penalty
function for the logarithmic barrier formulation of the nonlinear
programming problem.  The cost per linesearch iteration is one
function evaluation. For more information see 
[\ref VanShanno1999 "Vanderbei and Shanno, 1999"].

If the function evaluation is expensive or noisy, set the \c
merit_function to "argaez_tapia" or "van_shanno".

<!-- MSE/PDH: option retired on 12/14/2012 as OPT++ hardwires this
     	      internally to match merit_function.
The \c central_path specification represents a measure of proximity to
the central path and specifies an update strategy for the perturbation
parameter mu.  Refer to [\ref Argaez2002 "Argaez et al., 2002"] for a
detailed discussion on proximity measures to the central region. Valid
options are, again, \c el_bakry, \c argaez_tapia, or \c van_shanno.
The default value for \c central_path is the value of \c
merit_function (either user-selected or default). -->

The \c steplength_to_boundary specification is a parameter (between 0
and 1) that controls how close to the boundary of the feasible region
the algorithm is allowed to move.  A value of 1 means that the
algorithm is allowed to take steps that may reach the boundary of the
feasible region.  If the user wishes to maintain strict feasibility of
the design parameters this value should be less than 1.  Default
values are .8, .99995, and .95 for the \c el_bakry, \c argaez_tapia,
and \c van_shanno merit functions, respectively.  The \c
centering_parameter specification is a parameter (between 0 and 1)
that controls how closely the algorithm should follow the 
"central path". See [\ref Wright1 "Wright"] for the definition of central 
path. The larger the value, the more closely the algorithm follows the
central path, which results in small steps. A value of 0 indicates
that the algorithm will take a pure Newton step. Default values are
.2, .2, and .1 for the \c el_bakry, \c argaez_tapia, and \c van_shanno
merit functions, respectively.


Topics::	package_optpp, newton_method, not_yet_reviewed
Examples::
Theory::
Faq::
See_Also::	method-optpp_cg, method-optpp_g_newton, method-optpp_pds, method-optpp_fd_newton, method-optpp_g_newton
