Blurb::
Specifies the parameter set to be iterated by a particular method.
Description::
The \c variables specification in a Dakota input file specifies the parameter set to be iterated by a particular method. 
In the case of an optimization study, these variables are adjusted in order to locate an optimal design; in the case of parameter studies/sensitivity analysis/design of experiments, these parameters are perturbed to explore the parameter space; and in the case of uncertainty analysis, the variables are associated with distribution/interval characterizations which are used to compute corresponding distribution/interval characterizations for response functions. 
To accommodate these and other types of studies, Dakota supports design, uncertain, and state variable types for continuous and discrete variable domains, where uncertain types can be further categorized as either aleatory or epistemic and discrete domains can be further categorized as discrete range, discrete integer set, or discrete real set.

The variables section in a Dakota input file specifies the parameter set to be iterated by a particular method. 
This parameter set is made up of design, uncertain, and state variables. 

Design variables can be continuous or discrete and consist of those variables which an optimizer adjusts in order to locate an optimal design. Each of the design parameters can have an initial point and a descriptive tag. Continuous and discrete range types include lower and upper bounds, and discrete set types include the admissible set values.

Uncertain variables may be categorized as either aleatory or epistemic and either continuous or discrete. 
Continuous aleatory uncertain variables include normal, lognormal, uniform, loguniform, triangular, exponential, beta, gamma, gumbel, frechet, weibull, and histogram bin distributions. 
Discrete aleatory uncertain variables include poisson, binomial, negative binomial, geometric, hypergeometric, and histogram point distributions. 
In addition to aleatory uncertain variables defined by probability distributions, Dakota also supports epistemic uncertain variables that are non-probabilistic. 
These epistemic types involve continuous or discrete interval or discrete set specifications. 
For the interval cases, one defines either a single bounded interval per epistemic variable or a set of basic probability assignments (BPAs) that define belief structures, where each BPA defines the level of belief that the value of a particular variable lies within a particular interval. 
For discrete epistemic sets, the basic probability assignments are provided for each set value as opposed to each interval.

Each uncertain variable specification contains descriptive tags and most contain, either explicitly or implicitly, distribution lower and upper bounds. 
Distribution lower and upper bounds are explicit portions of the normal, lognormal, uniform, loguniform, triangular, and beta specifications, whereas they are implicitly defined for histogram bin, histogram point, and interval variables (from the extreme values within the bin/point/interval specifications) as well as for binomial (0 to num_trials) and hypergeometric (0 to min(num_drawn, num_selected)) variables. 
When used with design of experiments and multidimensional parameter studies, distribution bounds are also inferred for normal and lognormal (if optional bounds are unspecified) as well as for exponential, gamma, gumbel, frechet, weibull, poisson, negative binomial, and geometric (which have no bounds specifications); these bounds are [0, ] for exponential, gamma, frechet, weibull, poisson, negative binomial, geometric, and unspecified lognormal, and [, ] for gumbel and unspecified normal. 
For other types of parameter studies (vector and centered), an inferred initial starting point is needed for the uncertain variables. 
All uncertain variables are initialized to their means for these studies, where mean values for bounded normal and bounded lognormal may additionally be repaired to satisfy any specified distribution bounds, mean values for discrete integer range distributions are rounded down to the nearest integer, and mean values for discrete set distributions are rounded to the nearest set value. 
In addition to tags and bounds specifications, normal variables include mean and standard deviation specifications, lognormal variables include lambda and zeta, mean and standard deviation, or mean and error factor specifications, triangular variables include mode specifications, exponential variables include beta specifications, beta, gamma, gumbel, frechet, and weibull variables include alpha and beta specifications, histogram bin variables include abscissa and either ordinate or count specifications, poisson variables include lambda specifications, binomial and negative binomial variables include probability per trial and number of trials specifications, geometric variables include probability per trial specifications, hypergeometric variables include the specification of the total population, selected population, and number drawn, histogram point variables include abscissa and count specifications, and interval variables include basic probability assignments per interval.

State variables can be continuous or discrete and consist of "other" variables which are to be mapped through the simulation interface. 
Each state variable specification can have an initial state and descriptors. 
Continuous and discrete range types include lower and upper bounds, and discrete set types include the admissible set values. 
State variables provide a convenient mechanism for parameterizing additional model inputs, such as mesh density, simulation convergence tolerances and time step controls, and can be used to enact model adaptivity in future strategy developments.

The ordering of variables is important, and a consistent ordering is employed throughout the Dakota software. It is the same ordering as shown in dakota.input.summary and as presented in the outline of this chapter. That ordering can be summarized as continuous followed by discrete integer followed by discrete real within each of the following types: design, aleatory uncertain, epistemic uncertain, and state. Ordering of variable types below this granularity (e.g., from normal to histogram bin within continuous aleatory uncertain) is defined somewhat arbitrarily, but is enforced consistently throughout the code.
If the user does not specify any explicit override of the active view 
of the variables, Dakota then considers the response function 
specification.  If the user specifies objective functions or calibration 
terms in the response specification block, the active variables will 
be the design variables.  If the user specifies the more generic 
response type, \c response_functions, general response 
functions do not have a specific interpretation the way 
\c objective_functions or \c calibration_terms do. 
In the case of generic response functions, Dakota then tries to 
infer the active view from the method.  If the method is a parameter 
study, or any of the methods available under dace, psuade, or fsu methods, 
the active view is set to all variables.  For uncertainty quantification 
methods, if the method is sampling, 
then the view is set to aleatory if only aleatory variables are present, 
epistemic if only epistemic variables are present, or uncertain (covering
both aleatory and epistemic) if both are present.  If the uncertainty method 
involves interval estimation or evidence calculations, the view is set 
to epistemic. For other uncertainty quantification methods not mentioned 
in the previous sentences (e.g., reliability methods or stochastic 
expansion methods), the view is set to aleatory. 
Finally, for verification studies using the Richardson extrapolation 
method, the active view is set to state.   
Note that in surrogate-based optimization, where the surrogate 
is built on points defined by the method defined by the 
\c dace_method_pointer, the sampling used to generate the points 
is performed only over the design variables as a default unless 
otherwise specified (e.g. state variables will not be sampled 
for surrogate construction). 


Topics:: block, not_yet_reviewed
Examples::
Several examples follow. In the first example, two continuous design
variables are specified:

\verbatim
variables,
	continuous_design = 2
	  initial_point    0.9    1.1
	  upper_bounds     5.8    2.9
	  lower_bounds     0.5   -2.9
	  descriptors   'radius' 'location'
\endverbatim

In the next example, defaults are employed. In this case, \c
initial_point will default to a vector of \c 0. values, \c
upper_bounds will default to vector values of \c DBL_MAX (the
maximum number representable in double precision for a particular
platform, as defined in the platform's \c float.h C header file), \c
lower_bounds will default to a vector of \c -DBL_MAX values, and
\c descriptors will default to a vector of <tt>'cdv_i'</tt>
strings, where \c i ranges from one to two:

\verbatim
variables,
	continuous_design = 2
\endverbatim

In the following example, the syntax for a normal-lognormal
distribution is shown.  One normal and one lognormal uncertain
variable are completely specified by their means and standard
deviations. In addition, the dependence structure between the two
variables is specified using the \c uncertain_correlation_matrix.

\verbatim
variables,
        normal_uncertain    =  1
          means             =  1.0
          std_deviations    =  1.0
          descriptors       =  'TF1n'
        lognormal_uncertain =  1
          means             =  2.0
          std_deviations    =  0.5
          descriptors       =  'TF2ln'
        uncertain_correlation_matrix =  1.0 0.2
                                        0.2 1.0
\endverbatim

An example of the syntax for a state variables specification follows:

\verbatim
variables,
        continuous_state = 1
          initial_state       4.0
          lower_bounds        0.0
          upper_bounds        8.0
          descriptors        'CS1'
        discrete_state_range = 1
          initial_state       104
          lower_bounds        100
          upper_bounds        110
          descriptors        'DS1'
\endverbatim

And in a more advanced example, a variables specification containing a
set identifier, continuous and discrete design variables, normal and
uniform uncertain variables, and continuous and discrete state
variables is shown:

\verbatim
variables,
	id_variables = 'V1'
	continuous_design = 2
	  initial_point    0.9    1.1
	  upper_bounds     5.8    2.9
	  lower_bounds     0.5   -2.9
	  descriptors   'radius' 'location'
	discrete_design_range = 1
	  initial_point    2
	  upper_bounds     1
	  lower_bounds     3
	  descriptors   'material'
	normal_uncertain = 2
	  means          =  248.89, 593.33
	  std_deviations =   12.4,   29.7
	  descriptors    =  'TF1n'   'TF2n'
	uniform_uncertain = 2
	  lower_bounds =  199.3,  474.63
	  upper_bounds =  298.5,  712.
	  descriptors  =  'TF1u'   'TF2u'
	continuous_state = 2
	  initial_state = 1.e-4  1.e-6
	  descriptors   = 'EPSIT1' 'EPSIT2'
	discrete_state_set_int = 1
	  initial_state = 100
	  set_values    = 100 212 375
	  descriptors   = 'load_case'
\endverbatim

Theory::
Faq::
See_Also::	
